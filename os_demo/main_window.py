# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'demo.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
import threading
import time

import paddle
import serial
import torch
import cv2
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QWidget, QApplication, QTableWidgetItem
from paddleocr import PaddleOCR

# sys.path.append("./MvImport")
from MvImport.MvCameraControl_class import *
from MvImport.CameraParams_header import *
from ctypes import *
from MvImport.CameraParams_const import *
# import detect_with_API
import sys
from os_demo.windows import detect_with_API
from PIL import Image
from os_demo.MvImport.MvErrorDefine_const import MV_OK

sys.path.insert(0, '../yolov7')
sys.path.append("./MvImport")



class MainWindow(QWidget):
    sendAddDeviceName = pyqtSignal()
    deviceList = MV_CC_DEVICE_INFO_LIST()
    g_bExit = False
    # ch:创建相机实例 | en:Creat Camera Object
    try:
        cam = MvCamera()
    except:
        cam = None
    try:
        ser = serial.Serial(
            port='COM2',
            baudrate=115200,
            parity=serial.PARITY_NONE,
            bytesize=serial.EIGHTBITS,
            stopbits=serial.STOPBITS_ONE
        )
    except:
        ser = None
    def __init__(self):
        super(MainWindow, self).__init__()
        self.img = None
        self.img_copy = None
        self.image_cut = None
        self.frame = None
        self.detect_model = None
        self.text_model = None
        super(MainWindow, self).__init__()
        self.setupUi()
        # self.show()
        self.connect()

    # def keyPressEvent(self, event):
    #     if event.key() == QtCore.Qt.Key_Enter or event.key() == QtCore.Qt.Key_Return:
    #         if self.autoeffcomboBox.currentIndexChanged:
    #             text = self.autoeffcomboBox.currentText()
    #             if text == '开启':
    #                 self.set_gain_auto_on()
    #             elif text == '关闭':
    #                 self.set_gain_auto_off()
    #
    #
    #         if self.effectivelineEdit.textChanged:
    #             self.set_gain_value()
    #
    #         if self.autoAEcomboBox.currentIndexChanged:
    #             text = self.autoAEcomboBox.currentText()
    #             if text == '开启':
    #                 self.set_ae_on()
    #             elif text == '关闭':
    #                 self.set_ae_off()
    #     # 截图功能
        # if event.key() == QtCore.Qt.Key_Enter or event.key() == QtCore.Qt.Key_Return:
        #         if self.mainScreen.pos == [] and self.camLabel.pos == []:
        #                 self.addStringToTable("截图失败")
        #         else:
        #                 if self.stackedWidget.currentIndex() == 0:
        #                         self.imgprocessScreen.setStyleSheet("#imgprocessScreen{\n"
        #                                                             "\n"
        #                                                             "border:2px solid orange;\n"
        #                                     ====                        "\n"
        #                                                             "}")
        #                         res = self.mainScreen.pos
        #                         label_width = self.mainScreen.width()
        #                         label_height = self.mainScreen.height()
        #                         image = cv2.resize(self.img_copy, (label_width, label_height))
        #                         self.image_cut = image[res[0][1]:res[1][1], res[0][0]:res[1][0]]
        #
        #                         self.cutImgScreen.setScaledContents(True)
        #                         height, width, _ = self.image_cut.shape
        #                         bytesPerline = 3 * width
        #                         qimg_cut = QImage(self.image_cut.copy().data, width, height, bytesPerline,
        #                                           QImage.Format_RGB888).rgbSwapped()
        #                         self.cutImgScreen.setPixmap(QPixmap.fromImage(qimg_cut))
        #
        #                 elif self.stackedWidget.currentIndex() == 1:
        #                         res = self.camLabel.pos
        #                         label_width = self.camLabel.width()
        #                         label_height = self.camLabel.height()
        #                         image = cv2.resize(self.frame, (label_width, label_height))
        #                         self.image_cut = image[res[0][1]:res[1][1], res[0][0]:res[1][0]]

    def send_modbus_command(self, command):
        self.ser.write(bytes.fromhex(command))  # 将十六进制字符串转换为字节并发送
        time.sleep(0.1)  # 等待一段时间，确保命令被正确处理
        response = self.ser.read(self.ser.in_waiting).hex()  # 读取串口返回的数据（如果有的话）
        self.addStringToTable(f"Command sent: {command}, Response: {response}")

    def connect_and_emit_sendAddDeviceName(self):
        # Connect the sendAddDeviceName signal to a slot.
        self.sendAddDeviceName.connect(self.SelectDevice)
        # Emit the signal.
        self.sendAddDeviceName.emit()

    # 打开摄像头。
    def openCam(self, camid):
        self.hThreadHandle = []
        self.connect_and_emit_sendAddDeviceName()
        self.g_bExit = False
        # ch:选择设备并创建句柄 | en:Select device and create handle
        stDeviceList = cast(self.deviceList.pDeviceInfo[int(camid)], POINTER(MV_CC_DEVICE_INFO)).contents
        ret = self.cam.MV_CC_CreateHandle(stDeviceList)
        if ret != 0:
                self.addStringToTable("create handle fail! ret[0x%x]" % ret)
                sys.exit()
                # ch:打开设备 | en:Open device

        ret = self.cam.MV_CC_OpenDevice(MV_ACCESS_Exclusive, 0)
        if ret != 0:
                self.addStringToTable("open device fail! ret[0x%x]" % ret)
                sys.exit()

                # ch:探测网络最佳包大小(只对GigE相机有效) | en:Detection network optimal package size(It only works for the GigE camera)
        if stDeviceList.nTLayerType == MV_GIGE_DEVICE:
                nPacketSize = self.cam.MV_CC_GetOptimalPacketSize()
                if int(nPacketSize) > 0:
                        ret = self.cam.MV_CC_SetIntValue("GevSCPSPacketSize", nPacketSize)
                        if ret != 0:
                                self.addStringToTable("Warning: Set Packet Size fail! ret[0x%x]" % ret)
                else:
                        self.addStringToTable("Warning: Get Packet Size fail! ret[0x%x]" % nPacketSize)

            # ch:设置触发模式为off | en:Set trigger mode as off
        ret = self.cam.MV_CC_SetEnumValue("TriggerMode", MV_TRIGGER_MODE_OFF)
        if ret != 0:
                self.addStringToTable("set trigger mode fail! ret[0x%x]" % ret)
                sys.exit()
                # ch:获取数据包大小 | en:Get payload size
        stParam = MVCC_INTVALUE()
        memset(byref(stParam), 0, sizeof(MVCC_INTVALUE))

        ret = self.cam.MV_CC_GetIntValue("PayloadSize", stParam)
        if ret != 0:
                self.addStringToTable("get payload size fail! ret[0x%x]" % ret)
                sys.exit()
        nPayloadSize = stParam.nCurValue



        # ch:开始取流 | en:Start grab image
        ret = self.cam.MV_CC_StartGrabbing()
        if ret != 0:
                self.addStringToTable("start grabbing fail! ret[0x%x]" % ret)
                sys.exit()

        data_buf = (c_ubyte * nPayloadSize)()


        try:
            hThreadHandle1 = threading.Thread(target=self.work_thread, args=(self.cam, data_buf, nPayloadSize))
            hThreadHandle1.start()

        except Exception as e:
            self.addStringToTable(str(Exception))


    # 关闭相机
    def closeCam(self):
        if self.deviceList.nDeviceNum == 0:
            self.addStringToTable("Error: The Cam not connect")
            return
        self.g_bExit = True
        # ch:停止取流 | en:Stop grab image
        ret = self.cam.MV_CC_StopGrabbing()
        if ret != 0:
                self.addStringToTable("stop grabbing fail! ret[0x%x]" % ret)
                sys.exit()

        # ch:关闭设备 | Close device
        ret = self.cam.MV_CC_CloseDevice()
        if ret != 0:
                self.addStringToTable("close deivce fail! ret[0x%x]" % ret)

        # ch:销毁句柄 | Destroy handle
        ret = self.cam.MV_CC_DestroyHandle()
        if ret != 0:
                self.addStringToTable("destroy handle fail! ret[0x%x]" % ret)

    def warn(self):
        # 发送 红灯开 的指令
        command_open = "01 0f 00 01 00 01 01 01 d2 97"
        self.send_modbus_command(command_open)
        # 发送 蜂鸣开 的指令
        command_open = "01 0f 00 03 00 01 01 01 ab 57"
        self.send_modbus_command(command_open)

        # 等待 0.1 秒
        time.sleep(0.1)

        # 发送 红灯关 的指令
        command_close = "01 0f 00 01 00 01 01 00 13 57"
        self.send_modbus_command(command_close)
        # 发送 蜂鸣关 的指令
        command_close = "01 0f 00 03 00 01 01 00 6a 97"
        self.send_modbus_command(command_close)

    def work_thread(self, cam=0, pData=0, nDataSize=0):
        stFrameInfo = MV_FRAME_OUT_INFO_EX()
        memset(byref(stFrameInfo), 0, sizeof(stFrameInfo))

        while True:
                QIm = np.asarray(pData)  # 将c_ubyte_Array转化成ndarray得到（3686400，）
                # print(QIm.shape)
                QIm = QIm.reshape((1080, 1440, -1))  # 根据自己分辨率进行转化
                # QIm = cv2.cvtColor(QIm, cv2.COLOR_GRAY2RGB)  # 这一步获取到的颜色不对，因为默认是BRG，要转化成RGB，颜色才正常
                # QIm = cv2.cvtColor(QIm, cv2.COLOR_BGR2RGB)
                if self.detect_model is not None:
                        torch.cuda.empty_cache()  # 停止自动计算梯度
                        torch.set_grad_enabled(False)  # 释放CUDA缓存
                        result, names = self.detect_model.detect1([QIm])
                        QIm = result[0][0]

                pyrD1 = cv2.pyrDown(QIm)  # 向下取样
                pyrD2 = cv2.pyrDown(pyrD1, borderType=cv2.BORDER_DEFAULT)  # 向下取样
                image_height, image_width, image_depth = pyrD2.shape  # 读取图像高宽深度
                pyrD3 = QImage(pyrD2, image_width, image_height, image_width * image_depth, QImage.Format_RGB888)
                self.camLabel.setScaledContents(True)
                self.camLabel.setPixmap(QPixmap.fromImage(pyrD3))
                if self.text_model is not None:
                    # result = self.text_model.ocr(pyrD2, cls=True)
                    # if result == [None]:
                    #     self.addStringToTable("None")
                    # else:
                    #     text_res = []
                    #     for line in result:
                    #         for text in line:
                    #             t = text[-1][0]
                    #             text_res.append(t)
                    #     res = ' '.join(text_res)
                    #     self.addStringToTable(res)
                    try:
                        self.hThreadHandle.append(threading.Thread(target=self.text_thread, args=([pyrD2])))
                        self.hThreadHandle[-1].start()
                        self.hThreadHandle.pop(0)

                    except Exception as e:
                        self.addStringToTable(str(Exception))

                ret = cam.MV_CC_GetOneFrameTimeout(pData, nDataSize, stFrameInfo, 1000)
                if ret == 0:
                    if self.checkBox.checkState() == 2 and self.detect_model is not None:
                        pyrD1 = cv2.pyrDown(QIm)  # 向下取样
                        pyrD2 = cv2.pyrDown(pyrD1, borderType=cv2.BORDER_DEFAULT)  # 向下取样
                        image_height, image_width, image_depth = pyrD2.shape  # 读取图像高宽深度
                        pyrD3 = QImage(pyrD2, image_width, image_height, image_width * image_depth,
                                       QImage.Format_RGB888)
                        self.camLabel.setScaledContents(True)
                        self.camLabel.setPixmap(QPixmap.fromImage(pyrD3))
                    if self.checkBox.checkState() == 2 and self.checkSaveBox.checkState() == 2:
                        image = Image.fromarray(pyrD2)
                        # 获取当前时间并直接格式化为字符串
                        formatted_date_time = time.strftime('%Y-%m-%d %H-%M-%S')
                        res_path = os.path.join("../log",
                                                f"Image_{formatted_date_time}.jpg")
                        image.save(res_path)
                        self.addStringToTable(f'{res_path}已保存')
                    else:
                        pass
                    if self.detect_model is not None and self.checkWarnBox.checkState() == 2: # 如果yolo模型打开并且警报功能勾选了
                            if self.ser.isOpen() and names == []:
                                self.warn()
                                self.addStringToTable("Warning: Detect Nothing !")
                else:
                        self.addStringToTable("no data[0x%x]" % ret)
                if self.g_bExit == True:
                        del pData
                        break
        # 获得所有相机的列表存入cmbSelectDevice中

    def text_thread(self, img=[]):
        text_res = []
        result = self.text_model.ocr(img, cls=True)
        if result == [None]:
            # self.addStringToTable("None")
            return
        for line in result:
            for text in line:
                t = text[-1][0]
                text_res.append(t)
        res = ' '.join(text_res)
        self.addStringToTable(res)
        returnyolo


    # 在输出端里添加文字
    def addStringToTable(self, text):
        # 获取表格的行数
        rowPosition = self.tableWidget_2.rowCount()

        # 插入新的行
        self.tableWidget_2.setColumnCount(1)
        self.tableWidget_2.setRowCount(rowPosition + 1)

        # 在新行的第一列中添加表格项

        self.tableWidget_2.setItem(rowPosition, 0, QTableWidgetItem(text))
        self.tableWidget_2.setColumnWidth(0, 1000)

    def SelectDevice(self):
        '''
        选择所有能用的相机到列表中，
        gige相机需要配合 sdk 得到。
        '''
        # 得到相机列表
        tlayerType = MV_GIGE_DEVICE | MV_USB_DEVICE
        # ch:枚举设备 | en:Enum device
        ret = MvCamera.MV_CC_EnumDevices(tlayerType, self.deviceList)
        if ret != 0:

                self.addStringToTable("enum devices fail! ret[0x%x]" % ret)
                # sys.exit()
        if self.deviceList.nDeviceNum == 0:

                self.addStringToTable("find no device!")
                # sys.exit()

        self.addStringToTable("Find %d devices!" % self.deviceList.nDeviceNum)
        for i in range(0, self.deviceList.nDeviceNum):
                mvcc_dev_info = cast(self.deviceList.pDeviceInfo[i], POINTER(MV_CC_DEVICE_INFO)).contents
                if mvcc_dev_info.nTLayerType == MV_GIGE_DEVICE:
                        self.addStringToTable("\ngige device: [%d]" % i)
                        strModeName = ""
                        for per in mvcc_dev_info.SpecialInfo.stGigEInfo.chModelName:
                                self.strModeName = strModeName + chr(per)

    def set_gain_auto_on_off(self):
        text = self.autoeffcomboBox.currentText()
        if text == "开启":
            err = self.cam.MV_CC_SetEnumValue('GainAuto', 2)
            if err != MV_OK:
                self.addStringToTable(f"Error: {err}")
        elif text == "关闭":
            err = self.cam.MV_CC_SetEnumValue('GainAuto', 0)
            if err != MV_OK:
                self.addStringToTable(f"Error: {err}")



    def set_gain_value(self):
        try:
            value = float(eval(self.effectivelineEdit.text()))
            self.addStringToTable(value)
            if value <= 14.970300:
                self.cam.MV_CC_SetFloatValue('Gain', value)
        except:
            self.addStringToTable("Error: 格式错误或超出阈值")
            return

    def set_ae_on_off(self):
        text = self.autoAEcomboBox.currentText()
        if text == "开启":
            err = self.cam.MV_CC_SetEnumValue('ExposureAuto', 2)
            if err != MV_OK:
                self.addStringToTable(f"Error: {err}")
        elif text == "关闭":
            err = self.cam.MV_CC_SetEnumValue('ExposureAuto', 0)
            if err != MV_OK:
                self.addStringToTable(f"Error: {err}")


    def detect_floder(self):
        res_path = "..\\res" # C:\\Users\\spike\\MVS\\Data\\res
        if not self.detect_model:
            self.detect_model = detect_with_API.detectapi(weights='..\\yolov7\\models\\yolov7.pt')
            torch.cuda.empty_cache()  # 停止自动计算梯度
            torch.set_grad_enabled(False)  # 释放CUDA缓存
        # 创建文件夹
        if not os.path.exists(res_path):
            os.mkdir(res_path)
        # 读取待检测图片
        floder = "../log" # C:\\Users\\spike\\MVS\\Data\\MV-CA013-20GC (00J06719527)
        file_path_list = os.listdir(floder)
        for file_path in file_path_list:
            abs_path = os.path.join(floder, file_path)
            img_data = cv2.imread(abs_path)
            result, names = self.detect_model.detect1([img_data])
            img = result[0][0] # 获取识别机结果
            image = Image.fromarray(img)
            image.save(os.path.join(res_path, file_path))
            os.remove(abs_path)
            self.addStringToTable(f"{os.path.join(res_path, file_path)}识别成功")


    def setupUi(self):
        self.setObjectName("Form")
        self.resize(1321, 941)
        self.widget = QtWidgets.QWidget(self)
        self.widget.setGeometry(QtCore.QRect(0, 0, 1321, 941))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setStyleSheet("#widget{\n"
"background-color:white;\n"
"border:1px solid gray;\n"
"border-radius:5px;\n"
"}")
        self.widget.setObjectName("widget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.widget)
        self.stackedWidget.setGeometry(QtCore.QRect(180, 40, 1141, 901))
        self.stackedWidget.setStyleSheet("#stackedWidget{\n"
"background-color:rgb(248, 249, 251);\n"
"border: 1px solid gray;\n"
"}")
        self.stackedWidget.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.stackedWidget.setFrameShadow(QtWidgets.QFrame.Plain)
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.widget_2 = QtWidgets.QWidget(self.page)
        self.widget_2.setGeometry(QtCore.QRect(10, -7, 851, 121))
        self.widget_2.setStyleSheet("#widget_2{\n"
"background-color:rgb(248, 249, 251);\n"
"border-radius:10px;\n"
"border:1px solid gray;\n"
"}")
        self.widget_2.setObjectName("widget_2")
        self.widget_3 = QtWidgets.QWidget(self.widget_2)
        self.widget_3.setGeometry(QtCore.QRect(10, 10, 231, 101))
        self.widget_3.setStyleSheet("#widget_3{\n"
"background-color:white;\n"
"border-radius:10px;\n"
"}")
        self.widget_3.setObjectName("widget_3")
        self.openImgButton = QtWidgets.QPushButton(self.widget_3)
        self.openImgButton.setGeometry(QtCore.QRect(10, 20, 61, 61))
        self.openImgButton.setStyleSheet("#openImgButton{\n"
"background-color:white;\n"
"\n"
"border-radius:5px;\n"
"border: 1px solid;\n"
"}\n"
"#openImgButton::hover{\n"
"border: 2px solid;\n"
"}\n"
"#openImgButton:focus{\n"
"border: 2px solid;\n"
"}")
        self.openImgButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/img/插入图片.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.openImgButton.setIcon(icon)
        self.openImgButton.setIconSize(QtCore.QSize(50, 50))
        self.openImgButton.setObjectName("openImgButton")
        self.textBrowser = QtWidgets.QTextBrowser(self.widget_3)
        self.textBrowser.setGeometry(QtCore.QRect(80, 20, 121, 71))
        font = QtGui.QFont()
        font.setFamily("华文行楷")
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.textBrowser.setFont(font)
        self.textBrowser.setStyleSheet("#textBrowser{\n"
"border:0px;\n"
"background:rgb(248, 249, 251);\n"
"}")
        self.textBrowser.setObjectName("textBrowser")
        self.widget_4 = QtWidgets.QWidget(self.widget_2)
        self.widget_4.setGeometry(QtCore.QRect(300, 10, 221, 101))
        self.widget_4.setStyleSheet("#widget_4{\n"
"border-radius:10px;\n"
"background-color:white;\n"
"\n"
"}")
        self.widget_4.setObjectName("widget_4")
        self.openDirButton = QtWidgets.QPushButton(self.widget_4)
        self.openDirButton.setGeometry(QtCore.QRect(10, 20, 61, 61))
        self.openDirButton.setStyleSheet("#openDirButton{\n"
"background-color:white;\n"
"border-image: url(:/images/images/dir.svg);\n"
"border-radius:5px;\n"
"border: 1px solid;\n"
"}\n"
"#openDirButton::hover{\n"
"border: 2px solid;\n"
"}\n"
"#openDirButton::focus{\n"
"border: 2px solid;\n"
"}")
        self.openDirButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/img/文件夹.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.openDirButton.setIcon(icon1)
        self.openDirButton.setIconSize(QtCore.QSize(50, 50))
        self.openDirButton.setObjectName("openDirButton")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.widget_4)
        self.textBrowser_2.setGeometry(QtCore.QRect(80, 20, 111, 71))
        font = QtGui.QFont()
        font.setFamily("华文行楷")
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.textBrowser_2.setFont(font)
        self.textBrowser_2.setStyleSheet("#textBrowser_2{\n"
"border:0px;\n"
"background:rgb(248, 249, 251);\n"
"}")
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.widget_5 = QtWidgets.QWidget(self.widget_2)
        self.widget_5.setGeometry(QtCore.QRect(590, 10, 211, 101))
        self.widget_5.setStyleSheet("#widget_5{\n"
"background-color:white;\n"
"border-radius:10px;\n"
"}")
        self.widget_5.setObjectName("widget_5")
        self.openCamButton = QtWidgets.QPushButton(self.widget_5)
        self.openCamButton.setGeometry(QtCore.QRect(10, 20, 61, 61))
        self.openCamButton.setStyleSheet("#openCamButton{\n"
"background-color:white;\n"
"border-image: url(:/images/images/camera.svg);\n"
"border-radius:5px;\n"
"border: 1px solid;\n"
"}\n"
"#openCamButton::hover{\n"
"border:2px solid;\n"
"}\n"
"#openCamButton::focus{\n"
"border: 2px solid;\n"
"}")
        self.openCamButton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/img/摄像头_实体.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.openCamButton.setIcon(icon2)
        self.openCamButton.setIconSize(QtCore.QSize(58, 58))
        self.openCamButton.setObjectName("openCamButton")
        self.textBrowser_3 = QtWidgets.QTextBrowser(self.widget_5)
        self.textBrowser_3.setGeometry(QtCore.QRect(80, 20, 131, 71))
        font = QtGui.QFont()
        font.setFamily("华文行楷")
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.textBrowser_3.setFont(font)
        self.textBrowser_3.setStyleSheet("#textBrowser_3{\n"
"border:0px;\n"
"background:rgb(248, 249, 251);\n"
"}")
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.mainScreen = QtWidgets.QLabel(self.page)
        self.mainScreen.setGeometry(QtCore.QRect(10, 130, 851, 591))
        self.mainScreen.setStyleSheet("#mainScreen{\n"
"background-color:white;\n"
"border:1px solid gray;\n"
"border-radius:5px;\n"
"}")
        self.mainScreen.setText("")
        self.mainScreen.setObjectName("mainScreen")
        self.tableWidget = QtWidgets.QTableWidget(self.page)
        self.tableWidget.horizontalHeader().setVisible(False) # 隐藏列号
        self.tableWidget.setGeometry(QtCore.QRect(10, 730, 851, 169))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.stackedWidget_4 = QtWidgets.QStackedWidget(self.page)
        self.stackedWidget_4.setGeometry(QtCore.QRect(870, 0, 271, 901))
        self.stackedWidget_4.setObjectName("stackedWidget_4")
        self.modelPage = QtWidgets.QWidget()
        self.modelPage.setObjectName("modelPage")
        self.moudlecomboBox = QtWidgets.QComboBox(self.modelPage)
        self.moudlecomboBox.setGeometry(QtCore.QRect(10, 40, 251, 31))
        self.moudlecomboBox.setStyleSheet("#moudlecomboBox{\n"
"background-color: white;\n"
"border: 1px solid;\n"
"}")
        self.moudlecomboBox.setObjectName("moudlecomboBox")
        self.moudlecomboBox.addItem("")
        self.moudlecomboBox.addItem("")
        self.moudlelineEdit = QtWidgets.QLineEdit(self.modelPage)
        self.moudlelineEdit.setGeometry(QtCore.QRect(10, 100, 251, 30))
        self.moudlelineEdit.setStyleSheet("#moudlelineEdit{\n"
"border:1px solid;\n"
"}")
        self.moudlelineEdit.setObjectName("moudlelineEdit")
        self.moudlekindcheckBox = QtWidgets.QCheckBox(self.modelPage)
        self.moudlekindcheckBox.setGeometry(QtCore.QRect(10, 150, 181, 19))
        self.moudlekindcheckBox.setObjectName("moudlekindcheckBox")
        self.moudledircheckBox = QtWidgets.QCheckBox(self.modelPage)
        self.moudledircheckBox.setGeometry(QtCore.QRect(10, 190, 161, 19))
        self.moudledircheckBox.setObjectName("moudledircheckBox")
        self.moudleoutputBrowser = QtWidgets.QTextBrowser(self.modelPage)
        self.moudleoutputBrowser.setGeometry(QtCore.QRect(10, 240, 251, 251))
        self.moudleoutputBrowser.setObjectName("moudleoutputBrowser")
        self.moudleokButton = QtWidgets.QPushButton(self.modelPage)
        self.moudleokButton.setGeometry(QtCore.QRect(70, 540, 111, 31))
        self.moudleokButton.setStyleSheet("#moudleokButton{\n"
"background-color:orange;\n"
"border:1px solid;\n"
"border-radius:5px\n"
"}")
        self.moudleokButton.setObjectName("moudleokButton")
        self.stackedWidget_4.addWidget(self.modelPage)
        self.cutImgPage = QtWidgets.QWidget()
        self.cutImgPage.setObjectName("cutImgPage")
        self.widget_7 = QtWidgets.QWidget(self.cutImgPage)
        self.widget_7.setGeometry(QtCore.QRect(20, 30, 221, 101))
        self.widget_7.setStyleSheet("#widget_7{\n"
"background:rgb(248, 249, 251);\n"
"border-radius:5px;\n"
"}")
        self.widget_7.setObjectName("widget_7")
        self.cutImgButton = QtWidgets.QPushButton(self.widget_7)
        self.cutImgButton.setGeometry(QtCore.QRect(10, 20, 61, 61))
        self.cutImgButton.setStyleSheet("#cutImgButton{\n"
"\n"
"border-radius:5px;\n"
"}\n"
"#cutImgButton::hover{\n"
"border:2px solid orange;\n"
"}")
        self.cutImgButton.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/img/人机交互.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cutImgButton.setIcon(icon3)
        self.cutImgButton.setIconSize(QtCore.QSize(60, 60))
        self.cutImgButton.setObjectName("cutImgButton")
        self.textBrowser_5 = QtWidgets.QTextBrowser(self.widget_7)
        self.textBrowser_5.setGeometry(QtCore.QRect(80, 10, 131, 81))
        self.textBrowser_5.setStyleSheet("#textBrowser_5{\n"
"border:0px;\n"
"background:white;\n"
"}")
        self.textBrowser_5.setObjectName("textBrowser_5")
        self.cutImgScreen = QtWidgets.QLabel(self.cutImgPage)
        self.cutImgScreen.setGeometry(QtCore.QRect(10, 160, 251, 231))
        self.cutImgScreen.setStyleSheet("#cutImgScreen{\n"
"border:2px solid;\n"
"}")
        self.cutImgScreen.setText("")
        self.cutImgScreen.setObjectName("cutImgScreen")
        self.radioDirButton = QtWidgets.QCheckBox(self.cutImgPage)
        self.radioDirButton.setGeometry(QtCore.QRect(20, 440, 191, 19))
        self.radioDirButton.setObjectName("radioDirButton")
        self.cutImgokButton = QtWidgets.QPushButton(self.cutImgPage)
        self.cutImgokButton.setGeometry(QtCore.QRect(80, 480, 101, 31))
        self.cutImgokButton.setStyleSheet("#cutImgokButton{\n"
"font: 75 9pt \"Arial\";\n"
"background-color:white;\n"
"color:black;\n"
"border:1px solid gray;\n"
"\n"
"}\n"
"#cutImgokButton::hover{\n"
"background-color:gray;\n"
"}")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/images/images/确认.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cutImgokButton.setIcon(icon4)
        self.cutImgokButton.setObjectName("cutImgokButton")
        self.cutImgnoButton = QtWidgets.QPushButton(self.cutImgPage)
        self.cutImgnoButton.setGeometry(QtCore.QRect(80, 530, 101, 31))
        self.cutImgnoButton.setStyleSheet("#cutImgnoButton{\n"
"font: 75 9pt \"Arial\";\n"
"background-color:white;\n"
"color:black;\n"
"border:1px solid gray;\n"
"}\n"
"#cutImgnoButton::hover{\n"
"background-color:gray;\n"
"}")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/images/images/取消.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cutImgnoButton.setIcon(icon5)
        self.cutImgnoButton.setObjectName("cutImgnoButton")
        self.textBrowser_6 = QtWidgets.QTextBrowser(self.cutImgPage)
        self.textBrowser_6.setGeometry(QtCore.QRect(10, 400, 251, 31))
        self.textBrowser_6.setObjectName("textBrowser_6")
        self.stackedWidget_4.addWidget(self.cutImgPage)
        self.imgProcessPage = QtWidgets.QWidget()
        self.imgProcessPage.setObjectName("imgProcessPage")
        self.imgprocesscomboBox = QtWidgets.QComboBox(self.imgProcessPage)
        self.imgprocesscomboBox.setGeometry(QtCore.QRect(20, 20, 241, 31))
        self.imgprocesscomboBox.setStyleSheet("#imgprocesscomboBox{\n"
"background-color: white;\n"
"border: 1px solid;\n"
"}")
        self.imgprocesscomboBox.setObjectName("imgprocesscomboBox")
        self.imgprocesscomboBox.addItem("")
        self.imgprocesscomboBox.addItem("")
        self.imgprocesscomboBox.addItem("")
        self.imgprocesscomboBox.addItem("")
        self.imgprocesscomboBox.addItem("")
        self.imgprocesscomboBox.addItem("")
        self.imgprocesscomboBox.addItem("")
        self.imgprocesscomboBox.addItem("")
        self.imgprocesscomboBox.addItem("")
        self.imgprocesscomboBox.addItem("")
        self.imgprocesscomboBox.addItem("")
        self.imgprocesscomboBox.addItem("")
        self.imgprocesscomboBox.addItem("")
        self.imgprocesscomboBox.addItem("")
        self.imgprocesscomboBox.addItem("")
        self.imgprocessSaveButton = QtWidgets.QCheckBox(self.imgProcessPage)
        self.imgprocessSaveButton.setGeometry(QtCore.QRect(20, 360, 171, 20))
        self.imgprocessSaveButton.setObjectName("imgprocessSaveButton")
        self.paramButton = QtWidgets.QPushButton(self.imgProcessPage)
        self.paramButton.setGeometry(QtCore.QRect(20, 70, 111, 31))
        self.paramButton.setStyleSheet("#paramButton{\n"
"font: 75 9pt \"Arial\";\n"
"color:black;\n"
"border:1px solid;\n"
"}\n"
"#paramButton::hover{\n"
"font: 75 9pt \"Arial\";\n"
"background-color:white;\n"
"color:black;\n"
"border:2px solid;\n"
"}")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/images/images/参数.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.paramButton.setIcon(icon6)
        self.paramButton.setIconSize(QtCore.QSize(20, 20))
        self.paramButton.setObjectName("paramButton")
        self.viewButton = QtWidgets.QPushButton(self.imgProcessPage)
        self.viewButton.setGeometry(QtCore.QRect(150, 70, 101, 31))
        self.viewButton.setStyleSheet("#viewButton{\n"
"font: 75 9pt \"Arial\";\n"
"color:black;\n"
"border:1px solid;\n"
"}\n"
"#viewButton::hover{\n"
"font: 75 9pt \"Arial\";\n"
"background-color:white;\n"
"color:black;\n"
"border:2px solid;\n"
"}")
        self.viewButton.setIcon(icon6)
        self.viewButton.setIconSize(QtCore.QSize(20, 20))
        self.viewButton.setObjectName("viewButton")
        self.imgprocessScreen = QtWidgets.QLabel(self.imgProcessPage)
        self.imgprocessScreen.setGeometry(QtCore.QRect(20, 130, 221, 211))
        self.imgprocessScreen.setStyleSheet("#imgprocessScreen{\n"
"\n"
"border:2px solid;\n"
"\n"
"}")
        self.imgprocessScreen.setText("")
        self.imgprocessScreen.setObjectName("imgprocessScreen")
        self.imgprocessokButton = QtWidgets.QPushButton(self.imgProcessPage)
        self.imgprocessokButton.setGeometry(QtCore.QRect(90, 410, 81, 31))
        self.imgprocessokButton.setStyleSheet("#imgprocessokButton{\n"
"\n"
"background-color:orange;\n"
"border:1px solid;\n"
"border-radius:5px\n"
"}\n"
"#imgprocessokButton::hover{\n"
"background-color:purple;\n"
"color:orange;\n"
"}")
        self.imgprocessokButton.setObjectName("imgprocessokButton")
        self.imgprocessupButton = QtWidgets.QPushButton(self.imgProcessPage)
        self.imgprocessupButton.setGeometry(QtCore.QRect(243, 170, 20, 20))
        self.imgprocessupButton.setStyleSheet("#imgprocessupButton{\n"
"\n"
"border:0px;\n"
"}\n"
"#imgprocessupButton::hover{\n"
"\n"
"}")
        self.imgprocessupButton.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/img/上箭头.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.imgprocessupButton.setIcon(icon7)
        self.imgprocessupButton.setObjectName("imgprocessupButton")
        self.imgprocessdownButton = QtWidgets.QPushButton(self.imgProcessPage)
        self.imgprocessdownButton.setGeometry(QtCore.QRect(243, 290, 20, 20))
        self.imgprocessdownButton.setStyleSheet("#imgprocessdownButton{\n"
"border:0px;\n"
"}\n"
"#imgprocessdownButton::hover{\n"
"background-color:white;\n"
"\n"
"}")
        self.imgprocessdownButton.setText("")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/img/下箭头.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.imgprocessdownButton.setIcon(icon8)
        self.imgprocessdownButton.setObjectName("imgprocessdownButton")
        self.stackedWidget_4.addWidget(self.imgProcessPage)
        self.dirPage = QtWidgets.QWidget()
        self.dirPage.setObjectName("dirPage")
        self.label = QtWidgets.QLabel(self.dirPage)
        self.label.setGeometry(QtCore.QRect(10, 20, 121, 16))
        self.label.setStyleSheet("#label{\n"
"font: 9pt \"Arial\";\n"
"}")
        self.label.setObjectName("label")
        self.textBrowser_4 = QtWidgets.QTextBrowser(self.dirPage)
        self.textBrowser_4.setGeometry(QtCore.QRect(10, 50, 231, 91))
        self.textBrowser_4.setStyleSheet("#textBrowser_4{\n"
"border:0px;\n"
"}")
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.dirScreen = QtWidgets.QLabel(self.dirPage)
        self.dirScreen.setGeometry(QtCore.QRect(10, 180, 231, 221))
        self.dirScreen.setStyleSheet("#dirScreen{\n"
"border:1px solid;\n"
"}")
        self.dirScreen.setText("")
        self.dirScreen.setObjectName("dirScreen")
        self.dirupButton = QtWidgets.QPushButton(self.dirPage)
        self.dirupButton.setGeometry(QtCore.QRect(243, 207, 20, 20))
        self.dirupButton.setStyleSheet("#dirupButton{\n"
"border:0px;\n"
"}\n"
"#dirupButton::hover{\n"
"\n"
"}")
        self.dirupButton.setText("")
        self.dirupButton.setIcon(icon7)
        self.dirupButton.setObjectName("dirupButton")
        self.dirdownButton = QtWidgets.QPushButton(self.dirPage)
        self.dirdownButton.setGeometry(QtCore.QRect(243, 293, 20, 20))
        self.dirdownButton.setStyleSheet("#dirdownButton{\n"
"border:0px;\n"
"}\n"
"#dirdownButton::hover{\n"
"\n"
"}")
        self.dirdownButton.setText("")
        self.dirdownButton.setIcon(icon8)
        self.dirdownButton.setObjectName("dirdownButton")
        self.dirokButton = QtWidgets.QPushButton(self.dirPage)
        self.dirokButton.setGeometry(QtCore.QRect(244, 369, 20, 20))
        self.dirokButton.setStyleSheet("#dirokButton{\n"
"border:0px;\n"
"}\n"
"#dirokButton::hover{\n"
"\n"
"}")
        self.dirokButton.setText("")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(":/img/字体预览.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.dirokButton.setIcon(icon9)
        self.dirokButton.setObjectName("dirokButton")
        self.stackedWidget_4.addWidget(self.dirPage)
        self.stackedWidget.addWidget(self.page)
        self.campage = QtWidgets.QWidget()
        self.campage.setObjectName("campage")
        self.camtabWidget = QtWidgets.QTabWidget(self.campage)
        self.camtabWidget.setGeometry(QtCore.QRect(900, 0, 241, 901))
        self.camtabWidget.setStyleSheet("/*设置TabWidget中QTabBar的样式*/\n"
"QTabBar::tab{\n"
"    background-color: white;\n"
"    font-size:8pt;\n"
"    color:black;    /*设置tab中的文本的颜色*/\n"
"    border:1px solid gray;\n"
"    padding: 5px gray;\n"
"}\n"
"\n"
"/*设置TabWidget的边框的样式*/\n"
"QTabWidget::pane {\n"
"    border: 1px solid gray;\n"
"}\n"
"\n"
"/*设置TabWidget中鼠标悬浮在QTabBar的tab上，但未选中该Tab的样式*/\n"
"QTabBar::tab:hover:!selected {\n"
"    background-color:orange;\n"
"}\n"
"")
        self.camtabWidget.setObjectName("camtabWidget")
        self.normaltab = QtWidgets.QWidget()
        self.normaltab.setObjectName("normaltab")
        self.normaltoolBox = QtWidgets.QToolBox(self.normaltab)
        self.normaltoolBox.setGeometry(QtCore.QRect(0, 0, 241, 301))
        self.normaltoolBox.setStyleSheet("#normaltoolBox{\n"
"background-color:white;\n"
"}\n"
"#normaltoolBox::tab{\n"
"background-color:white;\n"
"border:1px solid gray;\n"
"}\n"
"#normaltoolBox::tab::selected{\n"
"background-color:orange;\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#normalpage{\n"
"background-color:white;\n"
"}\n"
"#isppage{\n"
"background-color:white;\n"
"}")
        self.normaltoolBox.setObjectName("normaltoolBox")
        self.normalpage = QtWidgets.QWidget()
        self.normalpage.setGeometry(QtCore.QRect(0, 0, 241, 241))
        self.normalpage.setObjectName("normalpage")
        self.effectivelineEdit = QtWidgets.QLineEdit(self.normalpage)
        self.effectivelineEdit.setGeometry(QtCore.QRect(107, 204, 80, 21))
        self.effectivelineEdit.setStyleSheet("#effectivelineEdit{\n"
"border:1px solid gray;\n"
"}")
        self.effectivelineEdit.setObjectName("effectivelineEdit")
        self.autoeffectiveButton = QtWidgets.QPushButton(self.normalpage)
        self.autoeffectiveButton.setGeometry(QtCore.QRect(198, 204, 40, 22))
        self.autoeffectiveButton.setObjectName("autoeffectiveButton")
        self.autoeffectiveButton.setStyleSheet("#autoeffectiveButton{\n"
                                        "background-color:orange;\n"
                                        "border:1px solid;\n"
                                        "border-radius:5px\n"
                                        "}")
        self.autoeffectiveButton.setText("确定")
        self.label_13 = QtWidgets.QLabel(self.normalpage)
        self.label_13.setGeometry(QtCore.QRect(6, 4, 131, 31))
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.normalpage)
        self.label_14.setGeometry(QtCore.QRect(5, 39, 111, 21))
        self.label_14.setObjectName("label_14")
        self.label_15 = QtWidgets.QLabel(self.normalpage)
        self.label_15.setGeometry(QtCore.QRect(5, 72, 101, 21))
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(self.normalpage)
        self.label_16.setGeometry(QtCore.QRect(6, 107, 111, 16))
        self.label_16.setObjectName("label_16")
        self.label_17 = QtWidgets.QLabel(self.normalpage)
        self.label_17.setGeometry(QtCore.QRect(6, 139, 101, 16))
        self.label_17.setObjectName("label_17")
        self.yolo_model_tone = QtWidgets.QCheckBox(self.normalpage)
        self.yolo_model_tone.setGeometry(QtCore.QRect(109, 39, 20, 21))

        self.yolo_model_tone.setObjectName("yolo_model_tone")
        self.text_model_tone = QtWidgets.QCheckBox(self.normalpage)
        self.text_model_tone.setGeometry(QtCore.QRect(109, 71, 21, 21))

        self.text_model_tone.setObjectName("text_model_tone")
        self.label_18 = QtWidgets.QLabel(self.normalpage)
        self.label_18.setGeometry(QtCore.QRect(6, 174, 72, 15))
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(self.normalpage)
        self.label_19.setGeometry(QtCore.QRect(6, 209, 72, 15))
        self.label_19.setObjectName("label_19")
        self.autoAEcomboBox = QtWidgets.QComboBox(self.normalpage)
        self.autoAEcomboBox.setGeometry(QtCore.QRect(108, 104, 80, 22))
        self.autoAEcomboBox.setStyleSheet("#autoAEcomboBox{\n"
"border:1px solid gray;\n"
"background-color:transparent;\n"
"color:gray;\n"
"}\n"
"#autoAEcomboBox::drop-down{\n"
"border:0px;\n"
"\n"
"}\n"
"#autoAEcomboBox::down-arrow {\n"
"border-image:url(:/images/images/向下箭头.svg);\n"
"  }")
        self.autoAEcomboBox.setObjectName("autoAEcomboBox")
        self.autoAEcomboBox.addItem("")
        self.autoAEcomboBox.addItem("")
        self.autoAEButton = QtWidgets.QPushButton(self.normalpage)
        self.autoAEButton.setGeometry(QtCore.QRect(198, 104, 40, 22))
        self.autoAEButton.setObjectName("autoAEButton")
        self.autoAEButton.setStyleSheet("#autoAEButton{\n"
"background-color:orange;\n"
"border:1px solid;\n"
"border-radius:5px\n"
"}")
        self.autoAEButton.setText("确定")

        self.autoAEtimelineEdit = QtWidgets.QLineEdit(self.normalpage)
        self.autoAEtimelineEdit.setGeometry(QtCore.QRect(109, 136, 80, 21))
        self.autoAEtimelineEdit.setStyleSheet("#autoAEtimelineEdit{\n"
"border:1px solid gray;\n"
"}")
        self.autoAEtimelineEdit.setObjectName("autoAEtimelineEdit")
        self.autoeffcomboBox = QtWidgets.QComboBox(self.normalpage)
        self.autoeffcomboBox.setGeometry(QtCore.QRect(109, 170, 80, 22))
        self.autoeffcomboBox.setStyleSheet("#autoeffcomboBox{\n"
"border:1px solid gray;\n"
"background-color:transparent;\n"
"color:gray;\n"
"}\n"
"#autoeffcomboBox::drop-down{\n"
"border:0px;\n"
"\n"
"}\n"
"#autoeffcomboBox::down-arrow {\n"
"border-image:url(:/images/images/向下箭头.svg);\n"
"  }")
        self.autoeffcomboBox.setObjectName("autoeffcomboBox")
        self.autoeffcomboBox.addItem("")
        self.autoeffcomboBox.addItem("")
        self.autoeffButton = QtWidgets.QPushButton(self.normalpage)
        self.autoeffButton.setGeometry(QtCore.QRect(198, 170, 40, 22))
        self.autoeffButton.setObjectName("autoeffButton")
        self.autoeffButton.setStyleSheet("#autoeffButton{\n"
                                        "background-color:orange;\n"
                                        "border:1px solid;\n"
                                        "border-radius:5px\n"
                                        "}")
        self.autoeffButton.setText("确定")
        self.checkBox = QtWidgets.QCheckBox(self.normalpage)
        self.checkBox.setGeometry(QtCore.QRect(80, 5, 31, 31))
        self.checkBox.setText("")
        self.checkBox.setObjectName("checkBox")
        self.saveLabel = QtWidgets.QLabel(self.normalpage)
        self.saveLabel.setGeometry(QtCore.QRect(105, 5, 31, 31))
        self.saveLabel.setText("保存")
        self.saveLabel.setObjectName("saveLabel")
        self.checkSaveBox = QtWidgets.QCheckBox(self.normalpage)
        self.checkSaveBox.setGeometry(QtCore.QRect(135, 5, 31, 31))
        self.checkSaveBox.setText("")
        self.checkSaveBox.setObjectName("checkSaveBox")
        self.checkWarnBox = QtWidgets.QCheckBox(self.normalpage)
        self.checkWarnBox.setGeometry(QtCore.QRect(195, 5, 31, 31))
        self.checkWarnBox.setText("")
        self.checkWarnBox.setObjectName("checkWarnBox")
        self.checkWarnLabel = QtWidgets.QLabel(self.normalpage)
        self.checkWarnLabel.setGeometry(QtCore.QRect(160, 5, 31, 31))
        self.checkWarnLabel.setText("报警")
        self.checkWarnLabel.setObjectName("checkWarnLabel")
        self.normaltoolBox.addItem(self.normalpage, "")
        self.isppage = QtWidgets.QWidget()
        self.isppage.setGeometry(QtCore.QRect(0, 0, 231, 251))
        self.isppage.setObjectName("isppage")
        self.whiteSpinBox = QtWidgets.QSpinBox(self.isppage)
        self.whiteSpinBox.setGeometry(QtCore.QRect(110, 210, 104, 22))
        self.whiteSpinBox.setStyleSheet("#whiteSpinBox{\n"
"\n"
"border:1px solid gray;\n"
"\n"
"}\n"
"#whiteSpinBox::down-arrow{\n"
"\n"
"\n"
"image: url(:/images/images/down.svg);\n"
"}\n"
"#whiteSpinBox::up-arrow{\n"
"image: url(:/images/images/up.svg);\n"
"}\n"
"\n"
"")
        self.whiteSpinBox.setMaximum(2000)
        self.whiteSpinBox.setProperty("value", 1822)
        self.whiteSpinBox.setObjectName("whiteSpinBox")
        self.whiteTurnComboBox = QtWidgets.QComboBox(self.isppage)
        self.whiteTurnComboBox.setGeometry(QtCore.QRect(110, 141, 104, 22))
        self.whiteTurnComboBox.setStyleSheet("#whiteTurnComboBox{\n"
"border:1px solid gray;\n"
"background-color:transparent;\n"
"color:gray;\n"
"}\n"
"#whiteTurnComboBox::drop-down{\n"
"border:0px;\n"
"\n"
"}\n"
"#whiteTurnComboBox::down-arrow {\n"
"border-image:url(:/images/images/向下箭头.svg);\n"
"  }")
        self.whiteTurnComboBox.setObjectName("whiteTurnComboBox")
        self.whiteTurnComboBox.addItem("")
        self.whiteTurnComboBox.addItem("")
        self.whiteColorcomboBox = QtWidgets.QComboBox(self.isppage)
        self.whiteColorcomboBox.setGeometry(QtCore.QRect(110, 175, 104, 22))
        self.whiteColorcomboBox.setStyleSheet("#whiteColorcomboBox{\n"
"border:1px solid gray;\n"
"background-color:transparent;\n"
"color:gray;\n"
"}\n"
"#whiteColorcomboBox::drop-down{\n"
"border:0px;\n"
"\n"
"}\n"
"#whiteColorcomboBox::down-arrow {\n"
"border-image:url(:/images/images/向下箭头.svg);\n"
"  }")
        self.whiteColorcomboBox.setObjectName("whiteColorcomboBox")
        self.whiteColorcomboBox.addItem("")
        self.whiteColorcomboBox.addItem("")
        self.whiteColorcomboBox.addItem("")
        self.shadeSpinBox = QtWidgets.QSpinBox(self.isppage)
        self.shadeSpinBox.setGeometry(QtCore.QRect(110, 80, 104, 22))
        self.shadeSpinBox.setStyleSheet("#shadeSpinBox{\n"
"\n"
"border:1px solid gray;\n"
"\n"
"}\n"
"#shadeSpinBox::down-arrow{\n"
"\n"
"\n"
"image: url(:/images/images/down.svg);\n"
"}\n"
"#shadeSpinBox::up-arrow{\n"
"image: url(:/images/images/up.svg);\n"
"}\n"
"\n"
"")
        self.shadeSpinBox.setWrapping(False)
        self.shadeSpinBox.setButtonSymbols(QtWidgets.QAbstractSpinBox.UpDownArrows)
        self.shadeSpinBox.setAccelerated(False)
        self.shadeSpinBox.setCorrectionMode(QtWidgets.QAbstractSpinBox.CorrectToPreviousValue)
        self.shadeSpinBox.setProperty("showGroupSeparator", False)
        self.shadeSpinBox.setPrefix("")
        self.shadeSpinBox.setMaximum(128)
        self.shadeSpinBox.setProperty("value", 128)
        self.shadeSpinBox.setObjectName("shadeSpinBox")
        self.saturationSpinBox = QtWidgets.QSpinBox(self.isppage)
        self.saturationSpinBox.setGeometry(QtCore.QRect(110, 110, 105, 22))
        self.saturationSpinBox.setStyleSheet("#saturationSpinBox{\n"
"\n"
"border:1px solid gray;\n"
"\n"
"}\n"
"#saturationSpinBox::down-arrow{\n"
"\n"
"\n"
"image: url(:/images/images/down.svg);\n"
"}\n"
"#saturationSpinBox::up-arrow{\n"
"image: url(:/images/images/up.svg);\n"
"}\n"
"\n"
"")
        self.saturationSpinBox.setMaximum(128)
        self.saturationSpinBox.setProperty("value", 128)
        self.saturationSpinBox.setObjectName("saturationSpinBox")
        self.gamacomboBox = QtWidgets.QComboBox(self.isppage)
        self.gamacomboBox.setGeometry(QtCore.QRect(110, 44, 104, 22))
        self.gamacomboBox.setStyleSheet("#gamacomboBox{\n"
"border:1px solid gray;\n"
"background-color:transparent;\n"
"color:gray;\n"
"}\n"
"#gamacomboBox::drop-down{\n"
"border:0px;\n"
"\n"
"}\n"
"#gamacomboBox::down-arrow {\n"
"border-image:url(:/images/images/向下箭头.svg);\n"
"  }")
        self.gamacomboBox.setObjectName("gamacomboBox")
        self.gamacomboBox.addItem("")
        self.label_21 = QtWidgets.QLabel(self.isppage)
        self.label_21.setGeometry(QtCore.QRect(0, 14, 111, 16))
        self.label_21.setObjectName("label_21")
        self.label_27 = QtWidgets.QLabel(self.isppage)
        self.label_27.setGeometry(QtCore.QRect(0, 216, 81, 16))
        self.label_27.setObjectName("label_27")
        self.label_22 = QtWidgets.QLabel(self.isppage)
        self.label_22.setGeometry(QtCore.QRect(0, 47, 111, 16))
        self.label_22.setObjectName("label_22")
        self.label_25 = QtWidgets.QLabel(self.isppage)
        self.label_25.setGeometry(QtCore.QRect(0, 143, 81, 16))
        self.label_25.setObjectName("label_25")
        self.label_26 = QtWidgets.QLabel(self.isppage)
        self.label_26.setGeometry(QtCore.QRect(0, 179, 111, 16))
        self.label_26.setObjectName("label_26")
        self.label_23 = QtWidgets.QLabel(self.isppage)
        self.label_23.setGeometry(QtCore.QRect(0, 80, 72, 15))
        self.label_23.setObjectName("label_23")
        self.label_24 = QtWidgets.QLabel(self.isppage)
        self.label_24.setGeometry(QtCore.QRect(0, 111, 72, 15))
        self.label_24.setObjectName("label_24")
        self.normaltoolBox.addItem(self.isppage, "")
        self.camtabWidget.addTab(self.normaltab, "")
        self.advancedtab = QtWidgets.QWidget()
        self.advancedtab.setObjectName("advancedtab")
        self.advancedToolBox = QtWidgets.QToolBox(self.advancedtab)
        self.advancedToolBox.setGeometry(QtCore.QRect(0, 0, 241, 381))
        self.advancedToolBox.setStyleSheet("#advancedToolBox{\n"
"background-color:white;\n"
"}\n"
"#advancedToolBox::tab{\n"
"background-color:white;\n"
"border:1px solid gray;\n"
"}\n"
"#advancedToolBox::tab::selected{\n"
"background-color:orange;\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#roipage{\n"
"background-color:white;\n"
"}\n"
"#aoipage{\n"
"background-color:white;\n"
"}\n"
"#watermarkpage{\n"
"background-color:white;\n"
"}")
        self.advancedToolBox.setObjectName("advancedToolBox")
        self.roipage = QtWidgets.QWidget()
        self.roipage.setGeometry(QtCore.QRect(0, 0, 241, 291))
        self.roipage.setObjectName("roipage")
        self.label_32 = QtWidgets.QLabel(self.roipage)
        self.label_32.setGeometry(QtCore.QRect(10, 2, 81, 23))
        self.label_32.setObjectName("label_32")
        self.roichoosecomboBox = QtWidgets.QComboBox(self.roipage)
        self.roichoosecomboBox.setGeometry(QtCore.QRect(100, 0, 121, 22))
        self.roichoosecomboBox.setStyleSheet("#roichoosecomboBox{\n"
"border:1px solid gray;\n"
"background-color:transparent;\n"
"color:gray;\n"
"}\n"
"#roichoosecomboBox::drop-down{\n"
"border:0px;\n"
"\n"
"}\n"
"#roichoosecomboBox::down-arrow {\n"
"border-image:url(:/images/images/向下箭头.svg);\n"
"  }")
        self.roichoosecomboBox.setObjectName("roichoosecomboBox")
        self.label_33 = QtWidgets.QLabel(self.roipage)
        self.label_33.setGeometry(QtCore.QRect(10, 38, 81, 23))
        self.label_33.setObjectName("label_33")
        self.roipxcomboBox = QtWidgets.QComboBox(self.roipage)
        self.roipxcomboBox.setGeometry(QtCore.QRect(100, 37, 121, 22))
        self.roipxcomboBox.setStyleSheet("#roipxcomboBox{\n"
"border:1px solid gray;\n"
"background-color:transparent;\n"
"color:gray;\n"
"}\n"
"#roipxcomboBox::drop-down{\n"
"border:0px;\n"
"\n"
"}\n"
"#roipxcomboBox::down-arrow {\n"
"border-image:url(:/images/images/向下箭头.svg);\n"
"  }")
        self.roipxcomboBox.setObjectName("roipxcomboBox")
        self.label_34 = QtWidgets.QLabel(self.roipage)
        self.label_34.setGeometry(QtCore.QRect(10, 84, 81, 23))
        self.label_34.setObjectName("label_34")
        self.roirepaintButton = QtWidgets.QPushButton(self.roipage)
        self.roirepaintButton.setGeometry(QtCore.QRect(98, 80, 61, 28))
        self.roirepaintButton.setStyleSheet("#roirepaintButton{\n"
"\n"
"background-color:rgb(9,123,237);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#roirepaintButton::hover{\n"
"background-color:rgb(2,101,210);\n"
"}")
        self.roirepaintButton.setObjectName("roirepaintButton")
        self.roieditButton = QtWidgets.QPushButton(self.roipage)
        self.roieditButton.setGeometry(QtCore.QRect(163, 80, 61, 28))
        self.roieditButton.setStyleSheet("#roieditButton{\n"
"\n"
"background-color:rgb(9,123,237);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#roieditButton::hover{\n"
"background-color:rgb(2,101,210);\n"
"}")
        self.roieditButton.setObjectName("roieditButton")
        self.label_35 = QtWidgets.QLabel(self.roipage)
        self.label_35.setGeometry(QtCore.QRect(10, 120, 81, 23))
        self.label_35.setObjectName("label_35")
        self.label_36 = QtWidgets.QLabel(self.roipage)
        self.label_36.setGeometry(QtCore.QRect(10, 156, 81, 23))
        self.label_36.setObjectName("label_36")
        self.label_37 = QtWidgets.QLabel(self.roipage)
        self.label_37.setGeometry(QtCore.QRect(10, 190, 81, 23))
        self.label_37.setObjectName("label_37")
        self.label_38 = QtWidgets.QLabel(self.roipage)
        self.label_38.setGeometry(QtCore.QRect(10, 225, 81, 23))
        self.label_38.setObjectName("label_38")
        self.label_39 = QtWidgets.QLabel(self.roipage)
        self.label_39.setGeometry(QtCore.QRect(10, 263, 111, 23))
        self.label_39.setObjectName("label_39")
        self.roiokButton = QtWidgets.QPushButton(self.roipage)
        self.roiokButton.setGeometry(QtCore.QRect(130, 260, 91, 28))
        self.roiokButton.setStyleSheet("#roiokButton{\n"
"\n"
"background-color:rgb(9,123,237);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#roiokButton::hover{\n"
"background-color:rgb(2,101,210);\n"
"}")
        self.roiokButton.setObjectName("roiokButton")
        self.roiHorizontalBox = QtWidgets.QSpinBox(self.roipage)
        self.roiHorizontalBox.setGeometry(QtCore.QRect(100, 120, 121, 22))
        self.roiHorizontalBox.setStyleSheet("#roiHorizontalBox{\n"
"\n"
"border:1px solid gray;\n"
"\n"
"}\n"
"#roiHorizontalBox::down-arrow{\n"
"\n"
"\n"
"image: url(:/images/images/down.svg);\n"
"}\n"
"#roiHorizontalBox::up-arrow{\n"
"image: url(:/images/images/up.svg);\n"
"}\n"
"\n"
"")
        self.roiHorizontalBox.setObjectName("roiHorizontalBox")
        self.roiVerticalBox = QtWidgets.QSpinBox(self.roipage)
        self.roiVerticalBox.setGeometry(QtCore.QRect(100, 155, 121, 22))
        self.roiVerticalBox.setStyleSheet("#roiVerticalBox{\n"
"\n"
"border:1px solid gray;\n"
"\n"
"}\n"
"#roiVerticalBox::down-arrow{\n"
"\n"
"\n"
"image: url(:/images/images/down.svg);\n"
"}\n"
"#roiVerticalBox::up-arrow{\n"
"image: url(:/images/images/up.svg);\n"
"}\n"
"\n"
"")
        self.roiVerticalBox.setObjectName("roiVerticalBox")
        self.roiWidthspinBox = QtWidgets.QSpinBox(self.roipage)
        self.roiWidthspinBox.setGeometry(QtCore.QRect(100, 190, 121, 22))
        self.roiWidthspinBox.setStyleSheet("#roiWidthspinBox{\n"
"\n"
"border:1px solid gray;\n"
"\n"
"}\n"
"#roiWidthspinBox::down-arrow{\n"
"\n"
"\n"
"image: url(:/images/images/down.svg);\n"
"}\n"
"#roiWidthspinBox::up-arrow{\n"
"image: url(:/images/images/up.svg);\n"
"}\n"
"\n"
"")
        self.roiWidthspinBox.setMaximum(710)
        self.roiWidthspinBox.setProperty("value", 710)
        self.roiWidthspinBox.setObjectName("roiWidthspinBox")
        self.roiHeightSpinBox = QtWidgets.QSpinBox(self.roipage)
        self.roiHeightSpinBox.setGeometry(QtCore.QRect(100, 227, 121, 22))
        self.roiHeightSpinBox.setStyleSheet("#roiHeightSpinBox{\n"
"\n"
"border:1px solid gray;\n"
"\n"
"}\n"
"#roiHeightSpinBox::down-arrow{\n"
"\n"
"\n"
"image: url(:/images/images/down.svg);\n"
"}\n"
"#roiHeightSpinBox::up-arrow{\n"
"image: url(:/images/images/up.svg);\n"
"}\n"
"\n"
"")
        self.roiHeightSpinBox.setMaximum(655)
        self.roiHeightSpinBox.setProperty("value", 655)
        self.roiHeightSpinBox.setObjectName("roiHeightSpinBox")
        self.advancedToolBox.addItem(self.roipage, "")
        self.aoipage = QtWidgets.QWidget()
        self.aoipage.setGeometry(QtCore.QRect(0, 0, 241, 291))
        self.aoipage.setObjectName("aoipage")
        self.label_40 = QtWidgets.QLabel(self.aoipage)
        self.label_40.setGeometry(QtCore.QRect(10, 10, 111, 23))
        self.label_40.setObjectName("label_40")
        self.label_41 = QtWidgets.QLabel(self.aoipage)
        self.label_41.setGeometry(QtCore.QRect(10, 42, 81, 23))
        self.label_41.setObjectName("label_41")
        self.label_42 = QtWidgets.QLabel(self.aoipage)
        self.label_42.setGeometry(QtCore.QRect(10, 72, 111, 23))
        self.label_42.setObjectName("label_42")
        self.label_43 = QtWidgets.QLabel(self.aoipage)
        self.label_43.setGeometry(QtCore.QRect(10, 102, 111, 23))
        self.label_43.setObjectName("label_43")
        self.label_44 = QtWidgets.QLabel(self.aoipage)
        self.label_44.setGeometry(QtCore.QRect(10, 134, 111, 23))
        self.label_44.setObjectName("label_44")
        self.label_45 = QtWidgets.QLabel(self.aoipage)
        self.label_45.setGeometry(QtCore.QRect(10, 166, 111, 23))
        self.label_45.setObjectName("label_45")
        self.label_46 = QtWidgets.QLabel(self.aoipage)
        self.label_46.setGeometry(QtCore.QRect(10, 204, 111, 23))
        self.label_46.setObjectName("label_46")
        self.label_47 = QtWidgets.QLabel(self.aoipage)
        self.label_47.setGeometry(QtCore.QRect(10, 234, 111, 23))
        self.label_47.setObjectName("label_47")
        self.label_48 = QtWidgets.QLabel(self.aoipage)
        self.label_48.setGeometry(QtCore.QRect(10, 267, 111, 23))
        self.label_48.setObjectName("label_48")
        self.aoichoosecomboBox = QtWidgets.QComboBox(self.aoipage)
        self.aoichoosecomboBox.setGeometry(QtCore.QRect(120, 10, 103, 22))
        self.aoichoosecomboBox.setStyleSheet("#aoichoosecomboBox{\n"
"border:1px solid gray;\n"
"background-color:transparent;\n"
"color:gray;\n"
"}\n"
"#aoichoosecomboBox::drop-down{\n"
"border:0px;\n"
"\n"
"}\n"
"#aoichoosecomboBox::down-arrow {\n"
"border-image:url(:/images/images/向下箭头.svg);\n"
"  }")
        self.aoichoosecomboBox.setObjectName("aoichoosecomboBox")
        self.aoichoosecomboBox.addItem("")
        self.aoirepaintButton = QtWidgets.QPushButton(self.aoipage)
        self.aoirepaintButton.setGeometry(QtCore.QRect(114, 40, 51, 21))
        self.aoirepaintButton.setStyleSheet("#aoirepaintButton{\n"
"\n"
"background-color:rgb(9,123,237);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#aoirepaintButton::hover{\n"
"background-color:rgb(2,101,210);\n"
"}")
        self.aoirepaintButton.setObjectName("aoirepaintButton")
        self.aoiEditButton = QtWidgets.QPushButton(self.aoipage)
        self.aoiEditButton.setGeometry(QtCore.QRect(170, 40, 51, 21))
        self.aoiEditButton.setStyleSheet("#aoiEditButton{\n"
"\n"
"background-color:rgb(9,123,237);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#aoiEditButton::hover{\n"
"background-color:rgb(2,101,210);\n"
"}")
        self.aoiEditButton.setObjectName("aoiEditButton")
        self.autoaoispinBox1 = QtWidgets.QSpinBox(self.aoipage)
        self.autoaoispinBox1.setGeometry(QtCore.QRect(121, 76, 102, 22))
        self.autoaoispinBox1.setStyleSheet("#autoaoispinBox1{\n"
"\n"
"border:1px solid gray;\n"
"\n"
"}\n"
"#autoaoispinBox1::down-arrow{\n"
"\n"
"\n"
"image: url(:/images/images/down.svg);\n"
"}\n"
"#autoaoispinBox1::up-arrow{\n"
"image: url(:/images/images/up.svg);\n"
"}\n"
"\n"
"")
        self.autoaoispinBox1.setObjectName("autoaoispinBox1")
        self.autoaoispinBox2 = QtWidgets.QSpinBox(self.aoipage)
        self.autoaoispinBox2.setGeometry(QtCore.QRect(121, 110, 102, 22))
        self.autoaoispinBox2.setStyleSheet("#autoaoispinBox2{\n"
"\n"
"border:1px solid gray;\n"
"\n"
"}\n"
"#autoaoispinBox2::down-arrow{\n"
"\n"
"\n"
"image: url(:/images/images/down.svg);\n"
"}\n"
"#autoaoispinBox2::up-arrow{\n"
"image: url(:/images/images/up.svg);\n"
"}\n"
"\n"
"")
        self.autoaoispinBox2.setObjectName("autoaoispinBox2")
        self.autoaoispinBox3 = QtWidgets.QSpinBox(self.aoipage)
        self.autoaoispinBox3.setGeometry(QtCore.QRect(121, 140, 102, 22))
        self.autoaoispinBox3.setStyleSheet("#autoaoispinBox3{\n"
"\n"
"border:1px solid gray;\n"
"\n"
"}\n"
"#autoaoispinBox3::down-arrow{\n"
"\n"
"\n"
"image: url(:/images/images/down.svg);\n"
"}\n"
"#autoaoispinBox3::up-arrow{\n"
"image: url(:/images/images/up.svg);\n"
"}\n"
"\n"
"")
        self.autoaoispinBox3.setObjectName("autoaoispinBox3")
        self.autoaoispinBox4 = QtWidgets.QSpinBox(self.aoipage)
        self.autoaoispinBox4.setGeometry(QtCore.QRect(122, 170, 102, 22))
        self.autoaoispinBox4.setStyleSheet("#autoaoispinBox4{\n"
"\n"
"border:1px solid gray;\n"
"\n"
"}\n"
"#autoaoispinBox4::down-arrow{\n"
"\n"
"\n"
"image: url(:/images/images/down.svg);\n"
"}\n"
"#autoaoispinBox4::up-arrow{\n"
"image: url(:/images/images/up.svg);\n"
"}\n"
"\n"
"")
        self.autoaoispinBox4.setObjectName("autoaoispinBox4")
        self.aoiokButton = QtWidgets.QPushButton(self.aoipage)
        self.aoiokButton.setGeometry(QtCore.QRect(130, 200, 91, 28))
        self.aoiokButton.setStyleSheet("#aoiokButton{\n"
"\n"
"background-color:rgb(9,123,237);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#aoiokButton::hover{\n"
"background-color:rgb(2,101,210);\n"
"}")
        self.aoiokButton.setObjectName("aoiokButton")
        self.checkBox_2 = QtWidgets.QCheckBox(self.aoipage)
        self.checkBox_2.setGeometry(QtCore.QRect(120, 240, 91, 19))
        self.checkBox_2.setText("")
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_3 = QtWidgets.QCheckBox(self.aoipage)
        self.checkBox_3.setGeometry(QtCore.QRect(120, 270, 91, 19))
        self.checkBox_3.setText("")
        self.checkBox_3.setObjectName("checkBox_3")
        self.advancedToolBox.addItem(self.aoipage, "")
        self.watermarkpage = QtWidgets.QWidget()
        self.watermarkpage.setGeometry(QtCore.QRect(0, 0, 241, 291))
        self.watermarkpage.setObjectName("watermarkpage")
        self.allcheckBox = QtWidgets.QCheckBox(self.watermarkpage)
        self.allcheckBox.setGeometry(QtCore.QRect(10, 10, 91, 19))
        self.allcheckBox.setObjectName("allcheckBox")
        self.timecheckBox = QtWidgets.QCheckBox(self.watermarkpage)
        self.timecheckBox.setGeometry(QtCore.QRect(10, 50, 91, 19))
        self.timecheckBox.setObjectName("timecheckBox")
        self.autoAEtimecheckBox = QtWidgets.QCheckBox(self.watermarkpage)
        self.autoAEtimecheckBox.setGeometry(QtCore.QRect(10, 90, 91, 19))
        self.autoAEtimecheckBox.setObjectName("autoAEtimecheckBox")
        self.whitecheckBox = QtWidgets.QCheckBox(self.watermarkpage)
        self.whitecheckBox.setGeometry(QtCore.QRect(10, 130, 91, 19))
        self.whitecheckBox.setObjectName("whitecheckBox")
        self.countcheckBox = QtWidgets.QCheckBox(self.watermarkpage)
        self.countcheckBox.setGeometry(QtCore.QRect(10, 170, 91, 19))
        self.countcheckBox.setObjectName("countcheckBox")
        self.roicheckBox = QtWidgets.QCheckBox(self.watermarkpage)
        self.roicheckBox.setGeometry(QtCore.QRect(128, 170, 97, 19))
        self.roicheckBox.setObjectName("roicheckBox")
        self.iocheckBox = QtWidgets.QCheckBox(self.watermarkpage)
        self.iocheckBox.setGeometry(QtCore.QRect(10, 210, 141, 19))
        self.iocheckBox.setObjectName("iocheckBox")
        self.gaincheckBox = QtWidgets.QCheckBox(self.watermarkpage)
        self.gaincheckBox.setGeometry(QtCore.QRect(128, 50, 91, 19))
        self.gaincheckBox.setObjectName("gaincheckBox")
        self.lightcheckBox = QtWidgets.QCheckBox(self.watermarkpage)
        self.lightcheckBox.setGeometry(QtCore.QRect(128, 90, 91, 19))
        self.lightcheckBox.setObjectName("lightcheckBox")
        self.hzcheckBox = QtWidgets.QCheckBox(self.watermarkpage)
        self.hzcheckBox.setGeometry(QtCore.QRect(128, 130, 91, 19))
        self.hzcheckBox.setObjectName("hzcheckBox")
        self.advancedToolBox.addItem(self.watermarkpage, "")
        self.camtabWidget.addTab(self.advancedtab, "")
        self.widget_17 = QtWidgets.QWidget(self.campage)
        self.widget_17.setGeometry(QtCore.QRect(-1, 29, 901, 731))
        self.widget_17.setStyleSheet("#widget_17{\n"
"border:1px solid gray;\n"
"background-color:white;\n"
"}")
        self.widget_17.setObjectName("widget_17")
        self.camLabel = QtWidgets.QLabel(self.widget_17)
        self.camLabel.setGeometry(QtCore.QRect(27, 9, 851, 691))
        self.camLabel.setStyleSheet("#camLabel{\n"
"border:1px solid;\n"
"background-color: rgb(2,2,2);\n"
"}")
        self.camLabel.setText("")
        self.camLabel.setObjectName("camLabel")
        self.widget_19 = QtWidgets.QWidget(self.widget_17)
        self.widget_19.setGeometry(QtCore.QRect(1, 710, 901, 21))
        self.widget_19.setStyleSheet("#widget_19{\n"
"border:1px solid gray;\n"
"}")
        self.widget_19.setObjectName("widget_19")
        self.line_3 = QtWidgets.QFrame(self.widget_19)
        self.line_3.setGeometry(QtCore.QRect(110, 0, 20, 41))
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.line_4 = QtWidgets.QFrame(self.widget_19)
        self.line_4.setGeometry(QtCore.QRect(210, 0, 20, 41))
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.line_5 = QtWidgets.QFrame(self.widget_19)
        self.line_5.setGeometry(QtCore.QRect(310, 0, 20, 41))
        self.line_5.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.spfrequencylabel = QtWidgets.QLabel(self.widget_19)
        self.spfrequencylabel.setGeometry(QtCore.QRect(2, 3, 71, 16))
        self.spfrequencylabel.setObjectName("spfrequencylabel")
        self.line_6 = QtWidgets.QFrame(self.widget_19)
        self.line_6.setGeometry(QtCore.QRect(410, 0, 20, 41))
        self.line_6.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.imgcountslabel = QtWidgets.QLabel(self.widget_19)
        self.imgcountslabel.setGeometry(QtCore.QRect(123, 2, 71, 16))
        self.imgcountslabel.setObjectName("imgcountslabel")
        self.wronglabel = QtWidgets.QLabel(self.widget_19)
        self.wronglabel.setGeometry(QtCore.QRect(221, 3, 71, 16))
        self.wronglabel.setObjectName("wronglabel")
        self.losepacketlabel = QtWidgets.QLabel(self.widget_19)
        self.losepacketlabel.setGeometry(QtCore.QRect(420, 3, 71, 16))
        self.losepacketlabel.setObjectName("losepacketlabel")
        self.line_7 = QtWidgets.QFrame(self.widget_19)
        self.line_7.setGeometry(QtCore.QRect(510, 0, 20, 41))
        self.line_7.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_7.setObjectName("line_7")
        self.widthheightLabel = QtWidgets.QLabel(self.widget_19)
        self.widthheightLabel.setGeometry(QtCore.QRect(330, 2, 71, 16))
        self.widthheightLabel.setObjectName("widthheightLabel")
        self.widget_18 = QtWidgets.QWidget(self.campage)
        self.widget_18.setGeometry(QtCore.QRect(0, 0, 901, 31))
        self.widget_18.setStyleSheet("#widget_18{\n"
"background-color:white;\n"
"border:1px solid gray;\n"
"}")
        self.widget_18.setObjectName("widget_18")
        play_icon = QtGui.QIcon()
        play_icon.addPixmap(QtGui.QPixmap(":/img/摄像头_实体.svg"))

        self.playButton = QtWidgets.QPushButton(self.widget_18)

        self.playButton.setGeometry(QtCore.QRect(1, 0, 41, 31))
        self.playButton.setStyleSheet("#playButton{\n"
"border:0px;\n"
"\n"
"}")
        self.playButton.setText("")
        self.playButton.setIcon(play_icon)
        self.playButton.setIconSize(QtCore.QSize(25, 25))
        self.playButton.setObjectName("playButton")
        stop_icon = QtGui.QIcon()
        stop_icon.addPixmap(QtGui.QPixmap(":/img/摄像头_关闭.svg"))

        self.stopButton = QtWidgets.QPushButton(self.widget_18)
        self.stopButton.setGeometry(QtCore.QRect(50, 0, 41, 31))
        self.stopButton.setStyleSheet("#stopButton{\n"
"border:0px;\n"
"}")
        self.stopButton.setText("")

        self.stopButton.setIcon(stop_icon)
        self.stopButton.setIconSize(QtCore.QSize(30, 30))
        self.stopButton.setObjectName("stopButton")

        analysis_icon = QtGui.QIcon()
        analysis_icon.addPixmap(QtGui.QPixmap(":/img/人机交互.svg"))

        self.analysisButton = QtWidgets.QPushButton(self.widget_18)
        self.analysisButton.setGeometry(QtCore.QRect(100, 0, 41, 31))
        self.analysisButton.setStyleSheet("border:0px;")
        self.analysisButton.setText("")

        self.analysisButton.setIcon(analysis_icon)
        self.analysisButton.setIconSize(QtCore.QSize(30, 30))
        self.analysisButton.setObjectName("analysisButton")

        detect_icon = QtGui.QIcon()
        detect_icon.addPixmap(QtGui.QPixmap(":/img/文件夹.svg"))

        self.detectButton = QtWidgets.QPushButton(self.widget_18)
        self.detectButton.setGeometry(QtCore.QRect(145, 0, 41, 31))
        self.detectButton.setStyleSheet("border:0px;")
        self.detectButton.setText("")

        self.detectButton.setIcon(detect_icon)
        self.detectButton.setIconSize(QtCore.QSize(25, 25))
        self.detectButton.setObjectName("detectButton")

        self.tableWidget_2 = QtWidgets.QTableWidget(self.campage)
        self.tableWidget_2.horizontalHeader().setVisible(False)  # 隐藏列号
        self.tableWidget_2.setGeometry(QtCore.QRect(0, 760, 901, 141))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(0)
        self.tableWidget_2.setRowCount(0)
        self.stackedWidget.addWidget(self.campage)
        self.logpage = QtWidgets.QWidget()
        self.logpage.setObjectName("logpage")
        self.searchcomboBox = QtWidgets.QComboBox(self.logpage)
        self.searchcomboBox.setGeometry(QtCore.QRect(10, 20, 51, 31))
        self.searchcomboBox.setStyleSheet("#searchcomboBox{\n"
"border:1px solid;\n"
"background-color:white;\n"
"}")
        self.searchcomboBox.setObjectName("searchcomboBox")
        self.logtableWidget = QtWidgets.QTableWidget(self.logpage)
        self.logtableWidget.setGeometry(QtCore.QRect(0, 60, 1141, 841))
        self.logtableWidget.setStyleSheet("#logtableWidget{\n"
"background-color:white;\n"
"}")
        self.logtableWidget.setRowCount(30)
        self.logtableWidget.setColumnCount(0)
        self.logtableWidget.setObjectName("logtableWidget")
        self.logtableWidget.horizontalHeader().setCascadingSectionResizes(True)
        self.logtableWidget.horizontalHeader().setSortIndicatorShown(False)
        self.logtableWidget.horizontalHeader().setStretchLastSection(False)
        self.logtableWidget.verticalHeader().setDefaultSectionSize(36)
        self.logtableWidget.verticalHeader().setSortIndicatorShown(True)
        self.loadButton = QtWidgets.QPushButton(self.logpage)
        self.loadButton.setGeometry(QtCore.QRect(660, 20, 111, 31))
        self.loadButton.setStyleSheet("#loadButton{\n"
"background-color:white;\n"
"border:1px solid;\n"
"}\n"
"#loadButton::hover{\n"
"border:2px solid;\n"
"}")
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap(":/img/保存.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.loadButton.setIcon(icon17)
        self.loadButton.setObjectName("loadButton")
        self.cleanButton = QtWidgets.QPushButton(self.logpage)
        self.cleanButton.setGeometry(QtCore.QRect(830, 20, 111, 31))
        self.cleanButton.setStyleSheet("#cleanButton{\n"
"background-color:white;\n"
"border:1px solid;\n"
"}\n"
"#cleanButton::hover{\n"
"border:2px solid;\n"
"}")
        icon18 = QtGui.QIcon()
        icon18.addPixmap(QtGui.QPixmap(":/img/删除色块.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cleanButton.setIcon(icon18)
        self.cleanButton.setObjectName("cleanButton")
        self.databaseButton = QtWidgets.QPushButton(self.logpage)
        self.databaseButton.setGeometry(QtCore.QRect(490, 20, 111, 31))
        self.databaseButton.setStyleSheet("#databaseButton{\n"
"background-color:white;\n"
"border:1px solid;\n"
"}\n"
"#databaseButton::hover{\n"
"border:2px solid;\n"
"}")
        icon19 = QtGui.QIcon()
        icon19.addPixmap(QtGui.QPixmap(":/img/mysql.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.databaseButton.setIcon(icon19)
        self.databaseButton.setObjectName("databaseButton")
        self.sortcomboBox = QtWidgets.QComboBox(self.logpage)
        self.sortcomboBox.setGeometry(QtCore.QRect(270, 20, 61, 31))
        self.sortcomboBox.setStyleSheet("#sortcomboBox{\n"
"border:1px solid;\n"
"background-color:white;\n"
"}")
        self.sortcomboBox.setObjectName("sortcomboBox")
        self.sortcomboBox.addItem("")
        self.sortcomboBox.addItem("")
        self.sortButton = QtWidgets.QPushButton(self.logpage)
        self.sortButton.setGeometry(QtCore.QRect(330, 20, 93, 31))
        self.sortButton.setStyleSheet("#sortButton{\n"
"background-color:white;\n"
"border:1px solid;\n"
"}\n"
"#sortButton::hover{\n"
"border:2px solid;\n"
"}")
        icon20 = QtGui.QIcon()
        icon20.addPixmap(QtGui.QPixmap(":/img/置换.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.sortButton.setIcon(icon20)
        self.sortButton.setObjectName("sortButton")
        self.widget_20 = QtWidgets.QWidget(self.logpage)
        self.widget_20.setGeometry(QtCore.QRect(60, 20, 191, 31))
        self.widget_20.setStyleSheet("#widget_20{\n"
"border:1px solid;\n"
"}")
        self.widget_20.setObjectName("widget_20")
        self.searchButton = QtWidgets.QPushButton(self.widget_20)
        self.searchButton.setGeometry(QtCore.QRect(0, 0, 31, 31))
        self.searchButton.setStyleSheet("#searchButton{\n"
"border:1px solid;\n"
"background-color:white;\n"
"\n"
"}")
        self.searchButton.setText("")
        self.searchButton.setIcon(icon3)
        self.searchButton.setObjectName("searchButton")
        self.searchlineEdit = QtWidgets.QLineEdit(self.widget_20)
        self.searchlineEdit.setGeometry(QtCore.QRect(30, 0, 161, 31))
        self.searchlineEdit.setStyleSheet("#searchlineEdit{\n"
"background-color:white;\n"
"border:1px solid;\n"
"}")
        self.searchlineEdit.setDragEnabled(True)
        self.searchlineEdit.setCursorMoveStyle(QtCore.Qt.VisualMoveStyle)
        self.searchlineEdit.setObjectName("searchlineEdit")
        self.stackedWidget.addWidget(self.logpage)
        self.settingspage = QtWidgets.QWidget()
        self.settingspage.setObjectName("settingspage")
        self.userbox = QtWidgets.QPushButton(self.settingspage)
        self.userbox.setGeometry(QtCore.QRect(60, 110, 91, 91))
        self.userbox.setStyleSheet("#userbox{\n"
"background-color:white;\n"
"border:2px solid;\n"
"border-radius:10px;\n"
"\n"
"}")
        self.userbox.setText("")
        icon21 = QtGui.QIcon()
        icon21.addPixmap(QtGui.QPixmap(":/images/images/1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.userbox.setIcon(icon21)
        self.userbox.setIconSize(QtCore.QSize(75, 75))
        self.userbox.setObjectName("userbox")
        self.stackedWidget_2 = QtWidgets.QStackedWidget(self.settingspage)
        self.stackedWidget_2.setGeometry(QtCore.QRect(0, 340, 991, 391))
        self.stackedWidget_2.setObjectName("stackedWidget_2")
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.defaultButton = QtWidgets.QPushButton(self.page_4)
        self.defaultButton.setGeometry(QtCore.QRect(110, 60, 161, 91))
        self.defaultButton.setStyleSheet("#defaultButton{\n"
"background-color:white;\n"
"border:2px solid gray;\n"
"border-radius:10px;\n"
"}\n"
"#defaultButton::focus{\n"
"border:2px solid orange;\n"
"}")
        self.defaultButton.setText("")
        icon22 = QtGui.QIcon()
        icon22.addPixmap(QtGui.QPixmap(":/images/images/default.bmp"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.defaultButton.setIcon(icon22)
        self.defaultButton.setIconSize(QtCore.QSize(156, 150))
        self.defaultButton.setObjectName("defaultButton")
        self.darkButton = QtWidgets.QPushButton(self.page_4)
        self.darkButton.setGeometry(QtCore.QRect(380, 60, 161, 91))
        self.darkButton.setStyleSheet("#darkButton{\n"
"background-color:white;\n"
"border:2px solid gray;\n"
"border-radius:10px;\n"
"}\n"
"#darkButton::focus{\n"
"border:2px solid orange;\n"
"}")
        self.darkButton.setText("")
        icon23 = QtGui.QIcon()
        icon23.addPixmap(QtGui.QPixmap(":/images/images/dark.bmp"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.darkButton.setIcon(icon23)
        self.darkButton.setIconSize(QtCore.QSize(158, 140))
        self.darkButton.setObjectName("darkButton")
        self.lightButton = QtWidgets.QPushButton(self.page_4)
        self.lightButton.setGeometry(QtCore.QRect(620, 60, 161, 91))
        self.lightButton.setStyleSheet("#lightButton{\n"
"background-color:white;\n"
"border:2px solid gray;\n"
"border-radius:10px;\n"
"}\n"
"#lightButton::focus{\n"
"border:2px solid orange;\n"
"}")
        self.lightButton.setText("")
        icon24 = QtGui.QIcon()
        icon24.addPixmap(QtGui.QPixmap(":/images/images/light.bmp"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.lightButton.setIcon(icon24)
        self.lightButton.setIconSize(QtCore.QSize(148, 150))
        self.lightButton.setObjectName("lightButton")
        self.radioButton_6 = QtWidgets.QRadioButton(self.page_4)
        self.radioButton_6.setGeometry(QtCore.QRect(110, 190, 161, 19))
        self.radioButton_6.setStyleSheet("font: 63 9pt \"Cascadia Mono SemiBold\";")
        self.radioButton_6.setObjectName("radioButton_6")
        self.radioButton_7 = QtWidgets.QRadioButton(self.page_4)
        self.radioButton_7.setGeometry(QtCore.QRect(620, 190, 115, 19))
        self.radioButton_7.setStyleSheet("font: 63 9pt \"Cascadia Mono SemiBold\";")
        self.radioButton_7.setObjectName("radioButton_7")
        self.radioButton_8 = QtWidgets.QRadioButton(self.page_4)
        self.radioButton_8.setGeometry(QtCore.QRect(380, 190, 115, 19))
        self.radioButton_8.setStyleSheet("font: 63 9pt \"Cascadia Mono SemiBold\";")
        self.radioButton_8.setObjectName("radioButton_8")
        self.line = QtWidgets.QFrame(self.page_4)
        self.line.setGeometry(QtCore.QRect(0, 0, 991, 3))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.stackedWidget_2.addWidget(self.page_4)
        self.page_7 = QtWidgets.QWidget()
        self.page_7.setObjectName("page_7")
        self.settingstoolBox = QtWidgets.QToolBox(self.page_7)
        self.settingstoolBox.setGeometry(QtCore.QRect(0, 10, 991, 381))
        self.settingstoolBox.setStyleSheet("#settingstoolBox{\n"
"    background-color:white;\n"
"    border:1px solid gray;\n"
"}\n"
"/* 被选中的标签 */\n"
"#settingstoolBox::tab::selected {\n"
"    /* 字体加粗,斜体 */\n"
"    background-color:rgb(9,123,237);\n"
"    color:white;\n"
"}\n"
"#settingstoolBox::tab {\n"
"    background:white ;\n"
"}\n"
"#page_13{\n"
"background-color:white;\n"
"}\n"
"#page_14{\n"
"background-color:white;\n"
"}\n"
"\n"
"#page_15{\n"
"background-color:white;\n"
"}\n"
"\n"
"#page_16{\n"
"background-color:white;\n"
"}\n"
"\n"
"\n"
"\n"
"")
        self.settingstoolBox.setObjectName("settingstoolBox")
        self.fontpage = QtWidgets.QWidget()
        self.fontpage.setGeometry(QtCore.QRect(0, 0, 100, 30))
        self.fontpage.setObjectName("fontpage")
        self.label_49 = QtWidgets.QLabel(self.fontpage)
        self.label_49.setGeometry(QtCore.QRect(10, 0, 71, 20))
        self.label_49.setObjectName("label_49")
        self.label_50 = QtWidgets.QLabel(self.fontpage)
        self.label_50.setGeometry(QtCore.QRect(10, 42, 71, 20))
        self.label_50.setObjectName("label_50")
        self.fontComboBox = QtWidgets.QFontComboBox(self.fontpage)
        self.fontComboBox.setGeometry(QtCore.QRect(90, 40, 257, 28))
        self.fontComboBox.setObjectName("fontComboBox")
        self.fontspinBox = QtWidgets.QSpinBox(self.fontpage)
        self.fontspinBox.setGeometry(QtCore.QRect(90, 0, 48, 24))
        self.fontspinBox.setObjectName("fontspinBox")
        self.settingstoolBox.addItem(self.fontpage, "")
        self.networkpage = QtWidgets.QWidget()
        self.networkpage.setGeometry(QtCore.QRect(0, 0, 989, 259))
        self.networkpage.setObjectName("networkpage")
        self.label_51 = QtWidgets.QLabel(self.networkpage)
        self.label_51.setGeometry(QtCore.QRect(10, 0, 51, 20))
        self.label_51.setObjectName("label_51")
        self.label_52 = QtWidgets.QLabel(self.networkpage)
        self.label_52.setGeometry(QtCore.QRect(10, 40, 71, 16))
        self.label_52.setObjectName("label_52")
        self.label_53 = QtWidgets.QLabel(self.networkpage)
        self.label_53.setGeometry(QtCore.QRect(0, 80, 60, 16))
        self.label_53.setText("")
        self.label_53.setObjectName("label_53")
        self.label_54 = QtWidgets.QLabel(self.networkpage)
        self.label_54.setGeometry(QtCore.QRect(10, 80, 71, 16))
        self.label_54.setObjectName("label_54")
        self.iplineEdit = QtWidgets.QLineEdit(self.networkpage)
        self.iplineEdit.setGeometry(QtCore.QRect(90, 0, 141, 21))
        self.iplineEdit.setObjectName("iplineEdit")
        self.suetmasklineEdit = QtWidgets.QLineEdit(self.networkpage)
        self.suetmasklineEdit.setGeometry(QtCore.QRect(90, 40, 141, 21))
        self.suetmasklineEdit.setObjectName("suetmasklineEdit")
        self.defaultGatewaylineEdit = QtWidgets.QLineEdit(self.networkpage)
        self.defaultGatewaylineEdit.setGeometry(QtCore.QRect(90, 80, 141, 21))
        self.defaultGatewaylineEdit.setObjectName("defaultGatewaylineEdit")
        self.settingstoolBox.addItem(self.networkpage, "")
        self.filepage = QtWidgets.QWidget()
        self.filepage.setGeometry(QtCore.QRect(0, 0, 100, 30))
        self.filepage.setObjectName("filepage")
        self.datafileButton = QtWidgets.QPushButton(self.filepage)
        self.datafileButton.setGeometry(QtCore.QRect(670, 20, 81, 32))
        self.datafileButton.setStyleSheet("#datafileButton{\n"
"\n"
"background-color:rgb(9,123,237);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#datafileButton::hover{\n"
"background-color:rgb(2,101,210);\n"
"}")
        self.datafileButton.setObjectName("datafileButton")
        self.label_55 = QtWidgets.QLabel(self.filepage)
        self.label_55.setGeometry(QtCore.QRect(10, 30, 151, 16))
        self.label_55.setObjectName("label_55")
        self.imgfileButton = QtWidgets.QPushButton(self.filepage)
        self.imgfileButton.setGeometry(QtCore.QRect(670, 70, 81, 32))
        self.imgfileButton.setStyleSheet("#imgfileButton{\n"
"\n"
"background-color:rgb(9,123,237);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#imgfileButton::hover{\n"
"background-color:rgb(2,101,210);\n"
"}")
        self.imgfileButton.setObjectName("imgfileButton")
        self.label_56 = QtWidgets.QLabel(self.filepage)
        self.label_56.setGeometry(QtCore.QRect(10, 80, 121, 16))
        self.label_56.setObjectName("label_56")
        self.imgfilelabl = QtWidgets.QLabel(self.filepage)
        self.imgfilelabl.setGeometry(QtCore.QRect(170, 70, 471, 31))
        self.imgfilelabl.setStyleSheet("border:1px solid gray;\n"
"border-radius:5px;")
        self.imgfilelabl.setText("")
        self.imgfilelabl.setObjectName("imgfilelabl")
        self.datafilelabel = QtWidgets.QLabel(self.filepage)
        self.datafilelabel.setGeometry(QtCore.QRect(170, 20, 471, 31))
        self.datafilelabel.setStyleSheet("border:1px solid gray;\n"
"border-radius:5px;")
        self.datafilelabel.setText("")
        self.datafilelabel.setObjectName("datafilelabel")
        self.settingstoolBox.addItem(self.filepage, "")
        self.datapage = QtWidgets.QWidget()
        self.datapage.setGeometry(QtCore.QRect(0, 0, 100, 30))
        self.datapage.setObjectName("datapage")
        self.label_57 = QtWidgets.QLabel(self.datapage)
        self.label_57.setGeometry(QtCore.QRect(0, 20, 121, 31))
        self.label_57.setObjectName("label_57")
        self.defaultdataButton = QtWidgets.QPushButton(self.datapage)
        self.defaultdataButton.setGeometry(QtCore.QRect(300, 22, 81, 32))
        self.defaultdataButton.setStyleSheet("#defaultdataButton{\n"
"\n"
"background-color:rgb(9,123,237);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#defaultdataButton::hover{\n"
"background-color:rgb(2,101,210);\n"
"}")
        self.defaultdataButton.setObjectName("defaultdataButton")
        self.label_2 = QtWidgets.QLabel(self.datapage)
        self.label_2.setGeometry(QtCore.QRect(130, 25, 141, 21))
        self.label_2.setStyleSheet("border:1px solid gray;\n"
"border-radius:5px;")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.settingstoolBox.addItem(self.datapage, "")
        self.stackedWidget_2.addWidget(self.page_7)
        self.page_5 = QtWidgets.QWidget()
        self.page_5.setObjectName("page_5")
        self.scrollArea = QtWidgets.QScrollArea(self.page_5)
        self.scrollArea.setGeometry(QtCore.QRect(-11, -4, 1001, 391))
        self.scrollArea.setStyleSheet("background-color:white;\n"
"")
        self.scrollArea.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.scrollArea.setFrameShadow(QtWidgets.QFrame.Raised)
        self.scrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.scrollArea.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustIgnored)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, -309, 980, 800))
        self.scrollAreaWidgetContents.setMinimumSize(QtCore.QSize(0, 800))
        self.scrollAreaWidgetContents.setStyleSheet("")
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.label_7 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_7.setGeometry(QtCore.QRect(20, 10, 901, 41))
        self.label_7.setStyleSheet("\n"
"font: 75 12pt \"等线\";\n"
"color:gray;\n"
"background-color:rgb(248, 249, 251)")
        self.label_7.setObjectName("label_7")
        self.widget_15 = QtWidgets.QWidget(self.scrollAreaWidgetContents)
        self.widget_15.setGeometry(QtCore.QRect(20, 60, 931, 101))
        self.widget_15.setStyleSheet("#widget_15{\n"
"background:white;\n"
"}\n"
"#widget_15::hover{\n"
"background-color:rgb(248, 249, 251);\n"
"}")
        self.widget_15.setObjectName("widget_15")
        self.userlabel = QtWidgets.QLabel(self.widget_15)
        self.userlabel.setGeometry(QtCore.QRect(110, 20, 171, 21))
        self.userlabel.setStyleSheet("#userlabel{\n"
"background-color:transparent;\n"
"}")
        self.userlabel.setObjectName("userlabel")
        self.label_3 = QtWidgets.QLabel(self.widget_15)
        self.label_3.setGeometry(QtCore.QRect(20, 10, 71, 41))
        self.label_3.setStyleSheet("#label_3{\n"
"font: 9pt \"华文细黑\";\n"
"background-color:transparent;\n"
"}")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.widget_15)
        self.label_4.setGeometry(QtCore.QRect(20, 60, 71, 31))
        self.label_4.setStyleSheet("#label_4{\n"
"font: 9pt \"华文细黑\";\n"
"background-color:transparent;\n"
"}")
        self.label_4.setObjectName("label_4")
        self.authLabel = QtWidgets.QLabel(self.widget_15)
        self.authLabel.setGeometry(QtCore.QRect(110, 60, 151, 31))
        self.authLabel.setStyleSheet("#authLabel{\n"
"background-color:transparent;\n"
"}")
        self.authLabel.setObjectName("authLabel")
        self.changeauthButton = QtWidgets.QPushButton(self.widget_15)
        self.changeauthButton.setGeometry(QtCore.QRect(220, 60, 31, 31))
        self.changeauthButton.setStyleSheet("#changeButton{\n"
"border:1px solid gray;\n"
"border-radius:5px;\n"
"\n"
"}")
        self.changeauthButton.setText("")
        icon25 = QtGui.QIcon()
        icon25.addPixmap(QtGui.QPixmap(":/images/images/编辑.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.changeauthButton.setIcon(icon25)
        self.changeauthButton.setIconSize(QtCore.QSize(15, 20))
        self.changeauthButton.setObjectName("changeauthButton")
        self.line_2 = QtWidgets.QFrame(self.scrollAreaWidgetContents)
        self.line_2.setGeometry(QtCore.QRect(20, 180, 931, 20))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.label_8 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_8.setGeometry(QtCore.QRect(30, 200, 901, 41))
        self.label_8.setStyleSheet("\n"
"font: 75 12pt \"等线\";\n"
"color:gray;\n"
"background-color:rgb(248, 249, 251)")
        self.label_8.setObjectName("label_8")
        self.widget_16 = QtWidgets.QWidget(self.scrollAreaWidgetContents)
        self.widget_16.setGeometry(QtCore.QRect(20, 250, 931, 501))
        self.widget_16.setStyleSheet("#widget_16{\n"
"background:white;\n"
"}\n"
"#widget_16::hover{\n"
"background-color:rgb(248, 249, 251);\n"
"}")
        self.widget_16.setObjectName("widget_16")
        self.label_10 = QtWidgets.QLabel(self.widget_16)
        self.label_10.setGeometry(QtCore.QRect(20, 10, 151, 41))
        self.label_10.setStyleSheet("#label_10{\n"
"font: 63 9pt \"Cascadia Mono SemiBold\";\n"
"background-color:transparent;\n"
"}\n"
"")
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.widget_16)
        self.label_11.setGeometry(QtCore.QRect(20, 120, 141, 31))
        self.label_11.setStyleSheet("#label_11{\n"
"font: 63 9pt \"Cascadia Mono SemiBold\";\n"
"background-color:transparent;\n"
"}")
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.widget_16)
        self.label_12.setGeometry(QtCore.QRect(20, 220, 201, 31))
        self.label_12.setStyleSheet("#label_12{\n"
"font: 63 9pt \"Cascadia Mono SemiBold\";\n"
"background-color:transparent;\n"
"}")
        self.label_12.setObjectName("label_12")
        self.oldPasswordEdit = QtWidgets.QLineEdit(self.widget_16)
        self.oldPasswordEdit.setGeometry(QtCore.QRect(20, 60, 431, 41))
        self.oldPasswordEdit.setStyleSheet("#oldPasswordEdit{\n"
"background-color:rgb(246,248,250);\n"
"border:2px solid gray;\n"
"border-radius:5px;\n"
"font: 63 9pt \"Cascadia Mono SemiBold\";\n"
"}")
        self.oldPasswordEdit.setObjectName("oldPasswordEdit")
        self.confirmNewPasswordEdit = QtWidgets.QLineEdit(self.widget_16)
        self.confirmNewPasswordEdit.setGeometry(QtCore.QRect(20, 270, 431, 41))
        self.confirmNewPasswordEdit.setStyleSheet("#confirmNewPasswordEdit{\n"
"background-color:rgb(246,248,250);\n"
"border:2px solid gray;\n"
"border-radius:5px;\n"
"font: 63 9pt \"Cascadia Mono SemiBold\";\n"
"}")
        self.confirmNewPasswordEdit.setObjectName("confirmNewPasswordEdit")
        self.newPasswordEdit = QtWidgets.QLineEdit(self.widget_16)
        self.newPasswordEdit.setGeometry(QtCore.QRect(20, 160, 431, 41))
        self.newPasswordEdit.setStyleSheet("#newPasswordEdit{\n"
"background-color:rgb(246,248,250);\n"
"border:2px solid gray;\n"
"border-radius:5px;\n"
"font: 63 9pt \"Cascadia Mono SemiBold\";\n"
"}")
        self.newPasswordEdit.setObjectName("newPasswordEdit")
        self.changePasswordButton = QtWidgets.QPushButton(self.widget_16)
        self.changePasswordButton.setGeometry(QtCore.QRect(20, 360, 171, 41))
        self.changePasswordButton.setStyleSheet("#changePasswordButton{\n"
"background-color:rgb(9,105,250);\n"
"color:white;\n"
"font: 63 9pt \"Cascadia Mono SemiBold\";\n"
"\n"
"border-radius:10px;\n"
"}")
        self.changePasswordButton.setObjectName("changePasswordButton")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.stackedWidget_2.addWidget(self.page_5)
        self.widget_8 = QtWidgets.QWidget(self.settingspage)
        self.widget_8.setGeometry(QtCore.QRect(250, 40, 231, 101))
        self.widget_8.setStyleSheet("#widget_3{\n"
"background-color:white;\n"
"border-radius:10px;\n"
"}")
        self.widget_8.setObjectName("widget_8")
        self.openImgButton_2 = QtWidgets.QPushButton(self.widget_8)
        self.openImgButton_2.setGeometry(QtCore.QRect(10, 20, 61, 61))
        self.openImgButton_2.setStyleSheet("#openImgButton{\n"
"background-color:rgb(208,239,252);\n"
"    border-image: url(:/images/images/img.svg);\n"
"border-radius:5px;\n"
"}\n"
"#openImgButton::hover{\n"
"background-color:orange;\n"
"}")
        self.openImgButton_2.setText("")
        self.openImgButton_2.setObjectName("openImgButton_2")
        self.textBrowser_7 = QtWidgets.QTextBrowser(self.widget_8)
        self.textBrowser_7.setGeometry(QtCore.QRect(80, 20, 121, 71))
        font = QtGui.QFont()
        font.setFamily("华文行楷")
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.textBrowser_7.setFont(font)
        self.textBrowser_7.setStyleSheet("#textBrowser{\n"
"border:0px;\n"
"background:rgb(248, 249, 251);\n"
"}")
        self.textBrowser_7.setObjectName("textBrowser_7")
        self.widget_9 = QtWidgets.QWidget(self.widget_8)
        self.widget_9.setGeometry(QtCore.QRect(0, 0, 231, 101))
        self.widget_9.setStyleSheet("#widget_3{\n"
"background-color:white;\n"
"border-radius:10px;\n"
"}")
        self.widget_9.setObjectName("widget_9")
        self.themeButton = QtWidgets.QPushButton(self.widget_9)
        self.themeButton.setGeometry(QtCore.QRect(10, 20, 61, 61))
        self.themeButton.setStyleSheet("#themeButton{\n"
"background-color:white;\n"
"border:2px solid gray;\n"
"border-radius:10px;\n"
"}\n"
"#themeButton::hover{\n"
"background-color:rgb(215,215,215);\n"
"}")
        self.themeButton.setText("")
        icon26 = QtGui.QIcon()
        icon26.addPixmap(QtGui.QPixmap(":/images/images/画板.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.themeButton.setIcon(icon26)
        self.themeButton.setIconSize(QtCore.QSize(40, 40))
        self.themeButton.setObjectName("themeButton")
        self.textBrowser_8 = QtWidgets.QTextBrowser(self.widget_9)
        self.textBrowser_8.setGeometry(QtCore.QRect(80, 20, 121, 71))
        font = QtGui.QFont()
        font.setFamily("华文行楷")
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.textBrowser_8.setFont(font)
        self.textBrowser_8.setStyleSheet("#textBrowser{\n"
"border:0px;\n"
"background:rgb(248, 249, 251);\n"
"}")
        self.textBrowser_8.setObjectName("textBrowser_8")
        self.widget_10 = QtWidgets.QWidget(self.settingspage)
        self.widget_10.setGeometry(QtCore.QRect(560, 40, 231, 101))
        self.widget_10.setStyleSheet("#widget_3{\n"
"background-color:white;\n"
"border-radius:10px;\n"
"}")
        self.widget_10.setObjectName("widget_10")
        self.openImgButton_4 = QtWidgets.QPushButton(self.widget_10)
        self.openImgButton_4.setGeometry(QtCore.QRect(10, 20, 61, 61))
        self.openImgButton_4.setStyleSheet("#openImgButton{\n"
"background-color:rgb(208,239,252);\n"
"    border-image: url(:/images/images/img.svg);\n"
"border-radius:5px;\n"
"}\n"
"#openImgButton::hover{\n"
"background-color:orange;\n"
"}")
        self.openImgButton_4.setText("")
        self.openImgButton_4.setObjectName("openImgButton_4")
        self.textBrowser_9 = QtWidgets.QTextBrowser(self.widget_10)
        self.textBrowser_9.setGeometry(QtCore.QRect(80, 20, 121, 71))
        font = QtGui.QFont()
        font.setFamily("华文行楷")
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.textBrowser_9.setFont(font)
        self.textBrowser_9.setStyleSheet("#textBrowser{\n"
"border:0px;\n"
"background:rgb(248, 249, 251);\n"
"}")
        self.textBrowser_9.setObjectName("textBrowser_9")
        self.widget_11 = QtWidgets.QWidget(self.widget_10)
        self.widget_11.setGeometry(QtCore.QRect(0, 0, 231, 101))
        self.widget_11.setStyleSheet("#widget_3{\n"
"background-color:white;\n"
"border-radius:10px;\n"
"}")
        self.widget_11.setObjectName("widget_11")
        self.generalButton = QtWidgets.QPushButton(self.widget_11)
        self.generalButton.setGeometry(QtCore.QRect(10, 20, 61, 61))
        self.generalButton.setStyleSheet("#generalButton{\n"
"background-color:white;\n"
"border:2px solid gray;\n"
"border-radius:10px;\n"
"}\n"
"#generalButton::hover{\n"
"background-color:rgb(215,215,215);\n"
"}")
        self.generalButton.setText("")
        icon27 = QtGui.QIcon()
        icon27.addPixmap(QtGui.QPixmap(":/images/images/icon-setting.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.generalButton.setIcon(icon27)
        self.generalButton.setIconSize(QtCore.QSize(40, 40))
        self.generalButton.setObjectName("generalButton")
        self.textBrowser_10 = QtWidgets.QTextBrowser(self.widget_11)
        self.textBrowser_10.setGeometry(QtCore.QRect(80, 20, 121, 71))
        font = QtGui.QFont()
        font.setFamily("华文行楷")
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.textBrowser_10.setFont(font)
        self.textBrowser_10.setStyleSheet("#textBrowser{\n"
"border:0px;\n"
"background:rgb(248, 249, 251);\n"
"}")
        self.textBrowser_10.setObjectName("textBrowser_10")
        self.widget_12 = QtWidgets.QWidget(self.settingspage)
        self.widget_12.setGeometry(QtCore.QRect(250, 200, 231, 101))
        self.widget_12.setStyleSheet("#widget_3{\n"
"background-color:white;\n"
"border-radius:10px;\n"
"}")
        self.widget_12.setObjectName("widget_12")
        self.openImgButton_6 = QtWidgets.QPushButton(self.widget_12)
        self.openImgButton_6.setGeometry(QtCore.QRect(10, 20, 61, 61))
        self.openImgButton_6.setStyleSheet("#openImgButton{\n"
"background-color:rgb(208,239,252);\n"
"    border-image: url(:/images/images/img.svg);\n"
"border-radius:5px;\n"
"}\n"
"#openImgButton::hover{\n"
"background-color:orange;\n"
"}")
        self.openImgButton_6.setText("")
        self.openImgButton_6.setObjectName("openImgButton_6")
        self.textBrowser_11 = QtWidgets.QTextBrowser(self.widget_12)
        self.textBrowser_11.setGeometry(QtCore.QRect(80, 20, 121, 71))
        font = QtGui.QFont()
        font.setFamily("华文行楷")
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.textBrowser_11.setFont(font)
        self.textBrowser_11.setStyleSheet("#textBrowser{\n"
"border:0px;\n"
"background:rgb(248, 249, 251);\n"
"}")
        self.textBrowser_11.setObjectName("textBrowser_11")
        self.widget_13 = QtWidgets.QWidget(self.widget_12)
        self.widget_13.setGeometry(QtCore.QRect(0, 0, 231, 101))
        self.widget_13.setStyleSheet("#widget_3{\n"
"background-color:white;\n"
"border-radius:10px;\n"
"}")
        self.widget_13.setObjectName("widget_13")
        self.safeButton = QtWidgets.QPushButton(self.widget_13)
        self.safeButton.setGeometry(QtCore.QRect(10, 20, 61, 61))
        self.safeButton.setStyleSheet("#safeButton{\n"
"background-color:white;\n"
"border:2px solid gray;\n"
"border-radius:10px;\n"
"}\n"
"#safeButton::hover{\n"
"background-color:rgb(215,215,215);\n"
"}")
        self.safeButton.setText("")
        icon28 = QtGui.QIcon()
        icon28.addPixmap(QtGui.QPixmap(":/images/images/LOCK.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon28.addPixmap(QtGui.QPixmap(":/images/images/Unlock.svg"), QtGui.QIcon.Active, QtGui.QIcon.Off)
        icon28.addPixmap(QtGui.QPixmap(":/images/images/Unlock.svg"), QtGui.QIcon.Active, QtGui.QIcon.On)
        icon28.addPixmap(QtGui.QPixmap(":/images/images/Unlock.svg"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.safeButton.setIcon(icon28)
        self.safeButton.setIconSize(QtCore.QSize(40, 40))
        self.safeButton.setObjectName("safeButton")
        self.textBrowser_12 = QtWidgets.QTextBrowser(self.widget_13)
        self.textBrowser_12.setGeometry(QtCore.QRect(80, 20, 121, 71))
        font = QtGui.QFont()
        font.setFamily("华文行楷")
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.textBrowser_12.setFont(font)
        self.textBrowser_12.setStyleSheet("#textBrowser{\n"
"border:0px;\n"
"background:rgb(248, 249, 251);\n"
"}")
        self.textBrowser_12.setObjectName("textBrowser_12")
        self.widget_14 = QtWidgets.QWidget(self.settingspage)
        self.widget_14.setGeometry(QtCore.QRect(560, 200, 231, 101))
        self.widget_14.setStyleSheet("#widget_3{\n"
"background-color:white;\n"
"border-radius:10px;\n"
"}")
        self.widget_14.setObjectName("widget_14")
        self.aboutButton = QtWidgets.QPushButton(self.widget_14)
        self.aboutButton.setGeometry(QtCore.QRect(10, 20, 61, 61))
        self.aboutButton.setStyleSheet("#aboutButton{\n"
"background-color:white;\n"
"border:2px solid gray;\n"
"border-radius:10px;\n"
"}\n"
"#aboutButton::hover{\n"
"background-color:rgb(215,215,215);\n"
"}")
        self.aboutButton.setText("")
        icon29 = QtGui.QIcon()
        icon29.addPixmap(QtGui.QPixmap(":/images/images/关于.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.aboutButton.setIcon(icon29)
        self.aboutButton.setIconSize(QtCore.QSize(40, 40))
        self.aboutButton.setObjectName("aboutButton")
        self.textBrowser_13 = QtWidgets.QTextBrowser(self.widget_14)
        self.textBrowser_13.setGeometry(QtCore.QRect(80, 20, 121, 71))
        font = QtGui.QFont()
        font.setFamily("华文行楷")
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.textBrowser_13.setFont(font)
        self.textBrowser_13.setStyleSheet("#textBrowser{\n"
"border:0px;\n"
"background:rgb(248, 249, 251);\n"
"}")
        self.textBrowser_13.setObjectName("textBrowser_13")
        self.stackedWidget.addWidget(self.settingspage)
        self.widget_6 = QtWidgets.QWidget(self.widget)
        self.widget_6.setGeometry(QtCore.QRect(0, 40, 181, 901))
        self.widget_6.setStyleSheet("#widget_6{\n"
"background-color:rgb(249,251,252);\n"
"border:1px solid gray;\n"
"\n"
"}")
        self.widget_6.setObjectName("widget_6")
        self.toHomeButton = QtWidgets.QPushButton(self.widget_6)
        self.toHomeButton.setGeometry(QtCore.QRect(20, 160, 151, 41))
        self.toHomeButton.setStyleSheet("#toHomeButton{\n"
"\n"
"background-color:white;\n"
"color:black;\n"
"border:0px solid;\n"
"}\n"
"#toHomeButton::focus{\n"
"background-color:rgb(18,176,241);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#toHomeButton::hover{\n"
"background-color:rgb(18,176,241);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"\n"
"")
        icon30 = QtGui.QIcon()
        icon30.addPixmap(QtGui.QPixmap(":/img/icon_应用管理.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon30.addPixmap(QtGui.QPixmap(":/img/icon_应用管理f.svg"), QtGui.QIcon.Active, QtGui.QIcon.On)
        self.toHomeButton.setIcon(icon30)
        self.toHomeButton.setIconSize(QtCore.QSize(25, 25))
        self.toHomeButton.setCheckable(True)
        self.toHomeButton.setChecked(False)
        self.toHomeButton.setAutoRepeat(False)
        self.toHomeButton.setAutoDefault(True)
        self.toHomeButton.setDefault(True)
        self.toHomeButton.setFlat(True)
        self.toHomeButton.setObjectName("toHomeButton")
        self.toCamButton = QtWidgets.QPushButton(self.widget_6)
        self.toCamButton.setGeometry(QtCore.QRect(20, 220, 151, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toCamButton.sizePolicy().hasHeightForWidth())
        self.toCamButton.setSizePolicy(sizePolicy)
        self.toCamButton.setStyleSheet("#toCamButton{\n"
"\n"
"background-color:white;\n"
"color:black;\n"
"border:0px solid;\n"
"}\n"
"#toCamButton::focus{\n"
"background-color:rgb(18,176,241);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#toCamButton::hover{\n"
"background-color:rgb(18,176,241);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"")
        icon31 = QtGui.QIcon()
        icon31.addPixmap(QtGui.QPixmap(":/img/摄像头_实体.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon31.addPixmap(QtGui.QPixmap(":/img/摄像头_实体.svg"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        icon31.addPixmap(QtGui.QPixmap(":/img/摄像头_实体.svg"), QtGui.QIcon.Disabled, QtGui.QIcon.On)
        icon31.addPixmap(QtGui.QPixmap(":/img/摄像头f.svg"), QtGui.QIcon.Active, QtGui.QIcon.On)
        icon31.addPixmap(QtGui.QPixmap(":/img/摄像头_实体.svg"), QtGui.QIcon.Selected, QtGui.QIcon.Off)
        icon31.addPixmap(QtGui.QPixmap(":/img/摄像头_实体.svg"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.toCamButton.setIcon(icon31)
        self.toCamButton.setIconSize(QtCore.QSize(25, 25))
        self.toCamButton.setCheckable(True)
        self.toCamButton.setChecked(False)
        self.toCamButton.setAutoRepeat(False)
        self.toCamButton.setAutoDefault(True)
        self.toCamButton.setDefault(True)
        self.toCamButton.setFlat(True)
        self.toCamButton.setObjectName("toCamButton")
        self.toSettingsButton = QtWidgets.QPushButton(self.widget_6)
        self.toSettingsButton.setEnabled(True)
        self.toSettingsButton.setGeometry(QtCore.QRect(20, 340, 151, 41))
        self.toSettingsButton.setStyleSheet("#toSettingsButton{\n"
"\n"
"background-color:white;\n"
"color:black;\n"
"border:0px solid;\n"
"}\n"
"#toSettingsButton::focus{\n"
"background-color:rgb(18,176,241);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#toSettingsButton::hover{\n"
"background-color:rgb(18,176,241);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"")
        icon32 = QtGui.QIcon()
        icon32.addPixmap(QtGui.QPixmap(":/img/编辑.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon32.addPixmap(QtGui.QPixmap(":/img/编辑f.svg"), QtGui.QIcon.Active, QtGui.QIcon.On)
        self.toSettingsButton.setIcon(icon32)
        self.toSettingsButton.setIconSize(QtCore.QSize(25, 25))
        self.toSettingsButton.setCheckable(True)
        self.toSettingsButton.setChecked(False)
        self.toSettingsButton.setAutoRepeat(True)
        self.toSettingsButton.setAutoExclusive(True)
        self.toSettingsButton.setAutoDefault(False)
        self.toSettingsButton.setDefault(False)
        self.toSettingsButton.setFlat(False)
        self.toSettingsButton.setObjectName("toSettingsButton")
        self.toLogButton = QtWidgets.QPushButton(self.widget_6)
        self.toLogButton.setGeometry(QtCore.QRect(20, 280, 151, 41))
        self.toLogButton.setStyleSheet("#toLogButton{\n"
"\n"
"background-color:white;\n"
"color:black;\n"
"border:0px solid;\n"
"}\n"
"#toLogButton::focus{\n"
"background-color:rgb(18,176,241);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#toLogButton::hover{\n"
"background-color:rgb(18,176,241);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"")
        icon33 = QtGui.QIcon()
        icon33.addPixmap(QtGui.QPixmap(":/img/mysql.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon33.addPixmap(QtGui.QPixmap(":/img/mysqlf.svg"), QtGui.QIcon.Active, QtGui.QIcon.On)
        self.toLogButton.setIcon(icon33)
        self.toLogButton.setIconSize(QtCore.QSize(25, 25))
        self.toLogButton.setCheckable(True)
        self.toLogButton.setAutoRepeat(False)
        self.toLogButton.setAutoDefault(True)
        self.toLogButton.setDefault(True)
        self.toLogButton.setFlat(True)
        self.toLogButton.setObjectName("toLogButton")
        self.pushButton_5 = QtWidgets.QPushButton(self.widget_6)
        self.pushButton_5.setGeometry(QtCore.QRect(60, 20, 81, 81))
        self.pushButton_5.setStyleSheet("#pushButton_5{\n"
"background-color:white;\n"
"border:2px solid;\n"
"border-radius:10px;\n"
"\n"
"}")
        self.pushButton_5.setText("")
        self.pushButton_5.setIcon(icon21)
        self.pushButton_5.setIconSize(QtCore.QSize(75, 75))
        self.pushButton_5.setObjectName("pushButton_5")
        self.toDirButton = QtWidgets.QPushButton(self.widget_6)
        self.toDirButton.setEnabled(True)
        self.toDirButton.setGeometry(QtCore.QRect(20, 650, 151, 41))
        self.toDirButton.setStyleSheet("#toDirButton{\n"
"\n"
"background-color:white;\n"
"color:black;\n"
"border:0px solid;\n"
"}\n"
"#toDirButton::focus{\n"
"background-color:rgb(18,176,241);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#toDirButton::hover{\n"
"background-color:rgb(18,176,241);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"")
        icon34 = QtGui.QIcon()
        icon34.addPixmap(QtGui.QPixmap(":/img/文件夹.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon34.addPixmap(QtGui.QPixmap(":/img/文件夹f.svg"), QtGui.QIcon.Active, QtGui.QIcon.On)
        self.toDirButton.setIcon(icon34)
        self.toDirButton.setIconSize(QtCore.QSize(25, 25))
        self.toDirButton.setCheckable(True)
        self.toDirButton.setChecked(False)
        self.toDirButton.setAutoRepeat(True)
        self.toDirButton.setAutoExclusive(True)
        self.toDirButton.setAutoDefault(False)
        self.toDirButton.setDefault(False)
        self.toDirButton.setFlat(False)
        self.toDirButton.setObjectName("toDirButton")
        self.toCutImgButton = QtWidgets.QPushButton(self.widget_6)
        self.toCutImgButton.setEnabled(True)
        self.toCutImgButton.setGeometry(QtCore.QRect(20, 710, 151, 41))
        self.toCutImgButton.setStyleSheet("#toCutImgButton{\n"
"\n"
"background-color:white;\n"
"color:black;\n"
"border:0px solid;\n"
"}\n"
"#toCutImgButton::focus{\n"
"background-color:rgb(18,176,241);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#toCutImgButton::hover{\n"
"background-color:rgb(18,176,241);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"")
        icon35 = QtGui.QIcon()
        icon35.addPixmap(QtGui.QPixmap(":/img/定位.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon35.addPixmap(QtGui.QPixmap(":/img/定位f.svg"), QtGui.QIcon.Active, QtGui.QIcon.On)
        self.toCutImgButton.setIcon(icon35)
        self.toCutImgButton.setIconSize(QtCore.QSize(25, 25))
        self.toCutImgButton.setCheckable(True)
        self.toCutImgButton.setChecked(False)
        self.toCutImgButton.setAutoRepeat(True)
        self.toCutImgButton.setAutoExclusive(True)
        self.toCutImgButton.setAutoDefault(False)
        self.toCutImgButton.setDefault(False)
        self.toCutImgButton.setFlat(False)
        self.toCutImgButton.setObjectName("toCutImgButton")
        self.toImgProcessButton = QtWidgets.QPushButton(self.widget_6)
        self.toImgProcessButton.setEnabled(True)
        self.toImgProcessButton.setGeometry(QtCore.QRect(20, 770, 151, 41))
        self.toImgProcessButton.setStyleSheet("#toImgProcessButton{\n"
"\n"
"background-color:white;\n"
"color:black;\n"
"border:0px solid;\n"
"}\n"
"#toImgProcessButton::focus{\n"
"background-color:rgb(18,176,241);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#toImgProcessButton::hover{\n"
"background-color:rgb(18,176,241);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"")
        icon36 = QtGui.QIcon()
        icon36.addPixmap(QtGui.QPixmap(":/img/图表-柱状图.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon36.addPixmap(QtGui.QPixmap(":/img/图表-柱状图f.svg"), QtGui.QIcon.Active, QtGui.QIcon.On)
        self.toImgProcessButton.setIcon(icon36)
        self.toImgProcessButton.setIconSize(QtCore.QSize(25, 25))
        self.toImgProcessButton.setCheckable(True)
        self.toImgProcessButton.setChecked(False)
        self.toImgProcessButton.setAutoRepeat(True)
        self.toImgProcessButton.setAutoExclusive(True)
        self.toImgProcessButton.setAutoDefault(False)
        self.toImgProcessButton.setDefault(False)
        self.toImgProcessButton.setFlat(False)
        self.toImgProcessButton.setObjectName("toImgProcessButton")
        self.toModelButton = QtWidgets.QPushButton(self.widget_6)
        self.toModelButton.setEnabled(True)
        self.toModelButton.setGeometry(QtCore.QRect(20, 830, 151, 41))
        self.toModelButton.setStyleSheet("#toModelButton{\n"
"background-color:white;\n"
"color:black;\n"
"border:0px solid;\n"
"}\n"
"#toModelButton::focus{\n"
"background-color:rgb(18,176,241);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"#toModelButton::hover{\n"
"background-color:rgb(18,176,241);\n"
"color:white;\n"
"border-radius:5px;\n"
"}\n"
"")
        icon37 = QtGui.QIcon()
        icon37.addPixmap(QtGui.QPixmap(":/img/AI.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon37.addPixmap(QtGui.QPixmap(":/img/AIf.svg"), QtGui.QIcon.Active, QtGui.QIcon.On)
        self.toModelButton.setIcon(icon37)
        self.toModelButton.setIconSize(QtCore.QSize(25, 25))
        self.toModelButton.setCheckable(True)
        self.toModelButton.setChecked(False)
        self.toModelButton.setAutoRepeat(True)
        self.toModelButton.setAutoExclusive(True)
        self.toModelButton.setAutoDefault(False)
        self.toModelButton.setDefault(False)
        self.toModelButton.setFlat(False)
        self.toModelButton.setObjectName("toModelButton")

        self.retranslateUi()
        self.stackedWidget.setCurrentIndex(0)
        self.camtabWidget.setCurrentIndex(2)
        self.normaltoolBox.setCurrentIndex(0)
        self.advancedToolBox.setCurrentIndex(2)
        self.stackedWidget_2.setCurrentIndex(1)
        self.settingstoolBox.setCurrentIndex(1)


    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Form", "Form"))
        self.textBrowser.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'华文行楷\'; font-size:9pt; font-weight:600; font-style:italic;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#000000;\">打开样例图片</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#7d7d7d;\">支持.png .jpg .bmp格式</span></p></body></html>"))
        self.textBrowser_2.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'华文行楷\'; font-size:9pt; font-weight:600; font-style:italic;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#000000;\">打开文件夹</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#7d7d7d;\">进行图片批量处理</span></p></body></html>"))
        self.textBrowser_3.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'华文行楷\'; font-size:9pt; font-weight:600; font-style:italic;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#000000;\">打开摄像头</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#7d7d7d;\">确认相机已连接</span></p></body></html>"))
        self.moudlecomboBox.setItemText(0, _translate("Form", "请选择识别模型"))
        self.moudlecomboBox.setItemText(1, _translate("Form", "chinese_ocr_db_crnn_server"))
        self.moudlelineEdit.setPlaceholderText(_translate("Form", "请输入识别内容"))
        self.moudlekindcheckBox.setText(_translate("Form", "对文件分类"))
        self.moudledircheckBox.setText(_translate("Form", "文件夹批量处理"))
        self.moudleokButton.setText(_translate("Form", "确认"))
        self.textBrowser_5.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">开启截图</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" color:#acaaac;\">请在主屏幕中截取</span></p></body></html>"))
        self.radioDirButton.setText(_translate("Form", "对文件夹批量处理"))
        self.cutImgokButton.setText(_translate("Form", "确认选取"))
        self.cutImgnoButton.setText(_translate("Form", "取消选取"))
        self.textBrowser_6.setPlaceholderText(_translate("Form", "x: y:"))
        self.imgprocesscomboBox.setItemText(0, _translate("Form", "请选择图像处理方法"))
        self.imgprocesscomboBox.setItemText(1, _translate("Form", "复原"))
        self.imgprocesscomboBox.setItemText(2, _translate("Form", "灰度值处理"))
        self.imgprocesscomboBox.setItemText(3, _translate("Form", "均值滤波"))
        self.imgprocesscomboBox.setItemText(4, _translate("Form", "高斯滤波"))
        self.imgprocesscomboBox.setItemText(5, _translate("Form", "腐蚀"))
        self.imgprocesscomboBox.setItemText(6, _translate("Form", "膨胀"))
        self.imgprocesscomboBox.setItemText(7, _translate("Form", "开运算"))
        self.imgprocesscomboBox.setItemText(8, _translate("Form", "闭运算"))
        self.imgprocesscomboBox.setItemText(9, _translate("Form", "RGB转BGR"))
        self.imgprocesscomboBox.setItemText(10, _translate("Form", "BGR转HSV(需要先转化为BGR图像)"))
        self.imgprocesscomboBox.setItemText(11, _translate("Form", "平移图像"))
        self.imgprocesscomboBox.setItemText(12, _translate("Form", "旋转图像"))
        self.imgprocesscomboBox.setItemText(13, _translate("Form", "图像镜像"))
        self.imgprocesscomboBox.setItemText(14, _translate("Form", "变为黑白图像"))
        self.imgprocessSaveButton.setText(_translate("Form", "保存结果"))
        self.paramButton.setText(_translate("Form", "调参"))
        self.viewButton.setText(_translate("Form", "预览"))
        self.imgprocessokButton.setText(_translate("Form", "确认"))
        self.label.setText(_translate("Form", "当前文件夹路径:"))
        self.textBrowser_4.setPlaceholderText(_translate("Form", "还未选择文件夹"))
        self.effectivelineEdit.setPlaceholderText(_translate("Form", "0.0000"))
        self.label_13.setText(_translate("Form", "触发模式"))
        self.label_14.setText(_translate("Form", "yolov7模型"))
        self.label_15.setText(_translate("Form", "字符识别模型"))
        self.label_16.setText(_translate("Form", "自动曝光"))
        self.label_17.setText(_translate("Form", "曝光时间(us)"))
        self.label_18.setText(_translate("Form", "自动增益"))
        self.label_19.setText(_translate("Form", "增益(dB)"))
        self.autoAEcomboBox.setItemText(0, _translate("Form", "开启"))
        self.autoAEcomboBox.setItemText(1, _translate("Form", "关闭"))
        self.autoAEtimelineEdit.setPlaceholderText(_translate("Form", "2500000.0000"))
        self.autoeffcomboBox.setItemText(0, _translate("Form", "开启"))
        self.autoeffcomboBox.setItemText(1, _translate("Form", "关闭"))
        self.normaltoolBox.setItemText(self.normaltoolBox.indexOf(self.normalpage), _translate("Form", "基本属性"))
        self.whiteTurnComboBox.setItemText(0, _translate("Form", "关闭"))
        self.whiteTurnComboBox.setItemText(1, _translate("Form", "打开"))
        self.whiteColorcomboBox.setItemText(0, _translate("Form", "红"))
        self.whiteColorcomboBox.setItemText(1, _translate("Form", "绿"))
        self.whiteColorcomboBox.setItemText(2, _translate("Form", "蓝"))
        self.gamacomboBox.setItemText(0, _translate("Form", "用户"))
        self.label_21.setText(_translate("Form", "伽马校正使能"))
        self.label_27.setText(_translate("Form", "白平衡分量"))
        self.label_22.setText(_translate("Form", "伽马校正选择器"))
        self.label_25.setText(_translate("Form", "自动白平衡"))
        self.label_26.setText(_translate("Form", "白平衡分量选项"))
        self.label_23.setText(_translate("Form", "色调"))
        self.label_24.setText(_translate("Form", "饱和度"))
        self.normaltoolBox.setItemText(self.normaltoolBox.indexOf(self.isppage), _translate("Form", "ISP"))
        self.camtabWidget.setTabText(self.camtabWidget.indexOf(self.normaltab), _translate("Form", "基本属性"))
        self.label_32.setText(_translate("Form", "区域选择器"))
        self.label_33.setText(_translate("Form", "像素格式"))
        self.label_34.setText(_translate("Form", "绘制ROI"))
        self.roirepaintButton.setText(_translate("Form", "重绘"))
        self.roieditButton.setText(_translate("Form", "编辑"))
        self.label_35.setText(_translate("Form", "水平偏移"))
        self.label_36.setText(_translate("Form", "垂直偏移"))
        self.label_37.setText(_translate("Form", "宽度"))
        self.label_38.setText(_translate("Form", "高度"))
        self.label_39.setText(_translate("Form", "恢复至最大画幅"))
        self.roiokButton.setText(_translate("Form", "执行"))
        self.advancedToolBox.setItemText(self.advancedToolBox.indexOf(self.roipage), _translate("Form", "感兴趣区域"))
        self.label_40.setText(_translate("Form", "自动调节选择器"))
        self.label_41.setText(_translate("Form", "绘制AOI"))
        self.label_42.setText(_translate("Form", "自动功能AOI..."))
        self.label_43.setText(_translate("Form", "自动功能AOI..."))
        self.label_44.setText(_translate("Form", "自动功能AOI..."))
        self.label_45.setText(_translate("Form", "自动功能AOI..."))
        self.label_46.setText(_translate("Form", "恢复至最大AOI"))
        self.label_47.setText(_translate("Form", "自动功能AOI..."))
        self.label_48.setText(_translate("Form", "自动功能AOI..."))
        self.aoichoosecomboBox.setItemText(0, _translate("Form", "感兴趣区域"))
        self.aoirepaintButton.setText(_translate("Form", "重绘"))
        self.aoiEditButton.setText(_translate("Form", "编辑"))
        self.aoiokButton.setText(_translate("Form", "执行"))
        self.advancedToolBox.setItemText(self.advancedToolBox.indexOf(self.aoipage), _translate("Form", "AOI"))
        self.allcheckBox.setText(_translate("Form", "全部"))
        self.timecheckBox.setText(_translate("Form", "时间戳"))
        self.autoAEtimecheckBox.setText(_translate("Form", "曝光时间"))
        self.whitecheckBox.setText(_translate("Form", "白平衡"))
        self.countcheckBox.setText(_translate("Form", "触发计数"))
        self.roicheckBox.setText(_translate("Form", "感兴趣区域"))
        self.iocheckBox.setText(_translate("Form", "线路输入/输出"))
        self.gaincheckBox.setText(_translate("Form", "增益"))
        self.lightcheckBox.setText(_translate("Form", "亮度"))
        self.hzcheckBox.setText(_translate("Form", "帧号"))
        self.advancedToolBox.setItemText(self.advancedToolBox.indexOf(self.watermarkpage), _translate("Form", "水印信息"))
        self.camtabWidget.setTabText(self.camtabWidget.indexOf(self.advancedtab), _translate("Form", "高级属性"))
        self.spfrequencylabel.setText(_translate("Form", "采集频率:"))
        self.imgcountslabel.setText(_translate("Form", "图像数:"))
        self.wronglabel.setText(_translate("Form", "错误数:"))
        self.losepacketlabel.setText(_translate("Form", "丢包数:"))
        self.widthheightLabel.setText(_translate("Form", "710 * 665"))
        self.loadButton.setText(_translate("Form", "导出文件"))
        self.cleanButton.setText(_translate("Form", "清空日志"))
        self.databaseButton.setText(_translate("Form", "切换数据库"))
        self.sortcomboBox.setItemText(0, _translate("Form", "时间"))
        self.sortcomboBox.setItemText(1, _translate("Form", "姓名"))
        self.sortButton.setText(_translate("Form", "排序"))
        self.searchlineEdit.setPlaceholderText(_translate("Form", "搜索"))
        self.radioButton_6.setText(_translate("Form", "System Default"))
        self.radioButton_7.setText(_translate("Form", "Light"))
        self.radioButton_8.setText(_translate("Form", "Dark"))
        self.label_49.setText(_translate("Form", "字体大小:"))
        self.label_50.setText(_translate("Form", "字体样式:"))
        self.settingstoolBox.setItemText(self.settingstoolBox.indexOf(self.fontpage), _translate("Form", "字体设置"))
        self.label_51.setText(_translate("Form", "IP地址:"))
        self.label_52.setText(_translate("Form", "子网掩码:"))
        self.label_54.setText(_translate("Form", "默认网关:"))
        self.settingstoolBox.setItemText(self.settingstoolBox.indexOf(self.networkpage), _translate("Form", "网络设置"))
        self.datafileButton.setText(_translate("Form", "选择"))
        self.label_55.setText(_translate("Form", "数据库文件导出格式:"))
        self.imgfileButton.setText(_translate("Form", "选择"))
        self.label_56.setText(_translate("Form", "图片导入格式:"))
        self.settingstoolBox.setItemText(self.settingstoolBox.indexOf(self.filepage), _translate("Form", "格式设置"))
        self.label_57.setText(_translate("Form", "默认数据库选择:"))
        self.defaultdataButton.setText(_translate("Form", "选择"))
        self.settingstoolBox.setItemText(self.settingstoolBox.indexOf(self.datapage), _translate("Form", "数据库设置"))
        self.label_7.setText(_translate("Form", "安全隐私设置"))
        self.userlabel.setText(_translate("Form", "TextLabel"))
        self.label_3.setText(_translate("Form", "用户名:"))
        self.label_4.setText(_translate("Form", "用户权限:"))
        self.authLabel.setText(_translate("Form", "TextLabel"))
        self.label_8.setText(_translate("Form", "修改密码"))
        self.label_10.setText(_translate("Form", "Old Password:"))
        self.label_11.setText(_translate("Form", "New Password："))
        self.label_12.setText(_translate("Form", "Confirm New Password:"))
        self.changePasswordButton.setText(_translate("Form", "Update Password"))
        self.textBrowser_7.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'华文行楷\'; font-size:9pt; font-weight:600; font-style:italic;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#000000;\">打开样例图片</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#7d7d7d;\">支持.png .jpg .bmp格式</span></p></body></html>"))
        self.textBrowser_8.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'华文行楷\'; font-size:9pt; font-weight:600; font-style:italic;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal;\">主题设置</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#747474;\">个性化选择您的主题</span></p></body></html>"))
        self.textBrowser_9.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'华文行楷\'; font-size:9pt; font-weight:600; font-style:italic;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#000000;\">打开样例图片</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#7d7d7d;\">支持.png .jpg .bmp格式</span></p></body></html>"))
        self.textBrowser_10.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'华文行楷\'; font-size:9pt; font-weight:600; font-style:italic;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#000000;\">常规设置</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#7d7d7d;\">用户喜爱调整的基本设置</span></p></body></html>"))
        self.textBrowser_11.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'华文行楷\'; font-size:9pt; font-weight:600; font-style:italic;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#000000;\">打开样例图片</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#7d7d7d;\">支持.png .jpg .bmp格式</span></p></body></html>"))
        self.textBrowser_12.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'华文行楷\'; font-size:9pt; font-weight:600; font-style:italic;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#000000;\">安全隐私设置</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#7d7d7d;\">查看和修改用户资料与权限</span></p></body></html>"))
        self.textBrowser_13.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'华文行楷\'; font-size:9pt; font-weight:600; font-style:italic;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#000000;\">关于产品</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'华文细黑\'; font-weight:400; font-style:normal; color:#7d7d7d;\">查看产品相关资料</span></p></body></html>"))
        self.toHomeButton.setText(_translate("Form", "主界面"))
        self.toCamButton.setText(_translate("Form", "摄像头界面"))
        self.toSettingsButton.setText(_translate("Form", "设置"))
        self.toLogButton.setText(_translate("Form", "数据库"))
        self.toDirButton.setText(_translate("Form", "文件夹"))
        self.toCutImgButton.setText(_translate("Form", "截图"))
        self.toImgProcessButton.setText(_translate("Form", "图像处理"))
        self.toModelButton.setText(_translate("Form", "模型识别"))

    def to_home(self):
        self.stackedWidget.setCurrentIndex(0)

    def to_cam(self):
        self.stackedWidget.setCurrentIndex(1)

    def to_log(self):
        self.stackedWidget.setCurrentIndex(2)

    def to_settings(self):
        self.stackedWidget.setCurrentIndex(3)

    def to_dir(self):
        self.stackedWidget_4.setCurrentIndex(3)

    def to_cutImg(self):
        self.stackedWidget_4.setCurrentIndex(1)

    def to_model(self):
        self.stackedWidget_4.setCurrentIndex(0)

    def to_imgprocess(self):
        self.stackedWidget_4.setCurrentIndex(2)

    def trigger_on_off(self):
        if self.deviceList.nDeviceNum == 0:
            self.addStringToTable("Error: The Cam not connect")
            return
        state = self.checkBox.checkState()
        if state == 2:
            # ch:设置触发模式为On | en:Set trigger mode as on
            ret = self.cam.MV_CC_SetEnumValue("TriggerMode", MV_TRIGGER_MODE_ON)
            if ret != 0:
                self.addStringToTable("error: set trigger mode fail! ret[0x%x]" % ret)
                sys.exit()

            # ch:设置触发源 | en:Set trigger source
            ret = self.cam.MV_CC_SetEnumValue("TriggerSource", MV_TRIGGER_SOURCE_LINE0)
            if ret != 0:
                self.addStringToTable("error: set trigger source fail! ret[0x%x]" % ret)
                sys.exit()
        else:
            # ch:设置触发模式为OFF | en:Set trigger mode as on
            ret = self.cam.MV_CC_SetEnumValue("TriggerMode", MV_TRIGGER_MODE_OFF)
            if ret != 0:
                self.addStringToTable("error: set trigger mode fail! ret[0x%x]" % ret)
                sys.exit()

    def set_yolov7_on_off(self):
        if self.yolo_model_tone.checkState() == 0:
            self.detect_model = None
        else:
            try:
                self.detect_model = detect_with_API.detectapi(
                    weights='..\\yolov7\\models\\yolov7.pt')
            except Exception as e:
                self.addStringToTable(str(e))

    def set_text_on_off(self):
        if self.text_model_tone.checkState() == 0:
            self.text_model = None
        else:
            self.text_model = PaddleOCR(use_angle_cls=True, lang="ch")
            paddle.fluid.dygraph.cleanup()
            # torch.set_grad_enabled(False)  # 释放CUDA缓存


    def connect(self):
        # 页面跳转
        self.toHomeButton.clicked.connect(self.to_home)
        self.toCamButton.clicked.connect(self.to_cam)
        self.toLogButton.clicked.connect(self.to_log)
        self.toSettingsButton.clicked.connect(self.to_settings)

        self.toDirButton.clicked.connect(self.to_dir)
        self.toCutImgButton.clicked.connect(self.to_cutImg)
        self.toModelButton.clicked.connect(self.to_model)
        self.toImgProcessButton.clicked.connect(self.to_imgprocess)

        # 摄像头界面
        self.playButton.clicked.connect(lambda:self.openCam('0'))
        self.stopButton.clicked.connect(self.closeCam)
        self.detectButton.clicked.connect(self.detect_floder)
        self.checkBox.stateChanged.connect(self.trigger_on_off)
        self.yolo_model_tone.stateChanged.connect(self.set_yolov7_on_off)
        self.text_model_tone.stateChanged.connect(self.set_text_on_off)
        self.autoAEButton.clicked.connect(self.set_ae_on_off)
        self.autoeffButton.clicked.connect(self.set_gain_auto_on_off)
        self.autoeffectiveButton.clicked.connect(self.set_gain_value)

import windows.resource_rc
# import resource_rc
if __name__ == '__main__':
   app = QApplication(sys.argv)
   W = MainWindow()
   W.show()
   sys.exit(app.exec_())